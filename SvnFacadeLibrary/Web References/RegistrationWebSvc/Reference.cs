//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
// 
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using SvnBridge.Properties;
#pragma warning disable 1591

namespace SvnBridge.RegistrationWebSvc
{
    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name="RegistrationSoap", Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Registration/03")]
    public partial class Registration : SoapHttpClientProtocol
    {
        SendOrPostCallback GetRegistrationEntriesOperationCompleted;

        bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public Registration()
        {
            Url = Settings.Default.SvnFacade_Library_RegistrationWebSvc_Registration;
            if ((IsLocalFileSystemWebService(Url) == true))
            {
                UseDefaultCredentials = true;
                useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get { return base.Url; }
            set
            {
                if ((((IsLocalFileSystemWebService(base.Url) == true)
                      && (useDefaultCredentialsSetExplicitly == false))
                     && (IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get { return base.UseDefaultCredentials; }
            set
            {
                base.UseDefaultCredentials = value;
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event GetRegistrationEntriesCompletedEventHandler GetRegistrationEntriesCompleted;

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Registration/03/GetR" +
                            "egistrationEntries", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Registration/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Registration/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public RegistrationEntry[] GetRegistrationEntries(string toolId)
        {
            object[] results = Invoke("GetRegistrationEntries", new object[]
                                                                    {
                                                                        toolId
                                                                    });
            return ((RegistrationEntry[])(results[0]));
        }

        /// <remarks/>
        public void GetRegistrationEntriesAsync(string toolId)
        {
            GetRegistrationEntriesAsync(toolId, null);
        }

        /// <remarks/>
        public void GetRegistrationEntriesAsync(string toolId,
                                                object userState)
        {
            if ((GetRegistrationEntriesOperationCompleted == null))
            {
                GetRegistrationEntriesOperationCompleted = new SendOrPostCallback(OnGetRegistrationEntriesOperationCompleted);
            }
            InvokeAsync("GetRegistrationEntries", new object[]
                                                      {
                                                          toolId
                                                      }, GetRegistrationEntriesOperationCompleted, userState);
        }

        void OnGetRegistrationEntriesOperationCompleted(object arg)
        {
            if ((GetRegistrationEntriesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetRegistrationEntriesCompleted(this, new GetRegistrationEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                 || (url == string.Empty)))
            {
                return false;
            }
            Uri wsUri = new Uri(url);
            if (((wsUri.Port >= 1024)
                 && (string.Compare(wsUri.Host, "localHost", StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Registration/03")]
    public partial class RegistrationEntry
    {
        string typeField;

        ServiceInterface[] serviceInterfacesField;

        Database[] databasesField;

        EventType[] eventTypesField;

        ArtifactType[] artifactTypesField;

        RegistrationExtendedAttribute[] registrationExtendedAttributesField;

        ChangeType changeTypeField;

        /// <remarks/>
        public string Type
        {
            get { return typeField; }
            set { typeField = value; }
        }

        /// <remarks/>
        public ServiceInterface[] ServiceInterfaces
        {
            get { return serviceInterfacesField; }
            set { serviceInterfacesField = value; }
        }

        /// <remarks/>
        public Database[] Databases
        {
            get { return databasesField; }
            set { databasesField = value; }
        }

        /// <remarks/>
        public EventType[] EventTypes
        {
            get { return eventTypesField; }
            set { eventTypesField = value; }
        }

        /// <remarks/>
        public ArtifactType[] ArtifactTypes
        {
            get { return artifactTypesField; }
            set { artifactTypesField = value; }
        }

        /// <remarks/>
        public RegistrationExtendedAttribute[] RegistrationExtendedAttributes
        {
            get { return registrationExtendedAttributesField; }
            set { registrationExtendedAttributesField = value; }
        }

        /// <remarks/>
        public ChangeType ChangeType
        {
            get { return changeTypeField; }
            set { changeTypeField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Registration/03")]
    public partial class ServiceInterface
    {
        string nameField;

        string urlField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string Url
        {
            get { return urlField; }
            set { urlField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Registration/03")]
    public partial class RegistrationExtendedAttribute
    {
        string nameField;

        string valueField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string Value
        {
            get { return valueField; }
            set { valueField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Registration/03")]
    public partial class OutboundLinkType
    {
        string nameField;

        string targetArtifactTypeToolField;

        string targetArtifactTypeNameField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string TargetArtifactTypeTool
        {
            get { return targetArtifactTypeToolField; }
            set { targetArtifactTypeToolField = value; }
        }

        /// <remarks/>
        public string TargetArtifactTypeName
        {
            get { return targetArtifactTypeNameField; }
            set { targetArtifactTypeNameField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Registration/03")]
    public partial class ArtifactType
    {
        string nameField;

        OutboundLinkType[] outboundLinkTypesField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public OutboundLinkType[] OutboundLinkTypes
        {
            get { return outboundLinkTypesField; }
            set { outboundLinkTypesField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Registration/03")]
    public partial class EventType
    {
        string nameField;

        string schemaField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string Schema
        {
            get { return schemaField; }
            set { schemaField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Registration/03")]
    public partial class Database
    {
        string nameField;

        string databaseNameField;

        string sQLServerNameField;

        string connectionStringField;

        bool excludeFromBackupField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string DatabaseName
        {
            get { return databaseNameField; }
            set { databaseNameField = value; }
        }

        /// <remarks/>
        public string SQLServerName
        {
            get { return sQLServerNameField; }
            set { sQLServerNameField = value; }
        }

        /// <remarks/>
        public string ConnectionString
        {
            get { return connectionStringField; }
            set { connectionStringField = value; }
        }

        /// <remarks/>
        public bool ExcludeFromBackup
        {
            get { return excludeFromBackupField; }
            set { excludeFromBackupField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Registration/03")]
    public enum ChangeType
    {
        /// <remarks/>
        Add,

        /// <remarks/>
        Change,

        /// <remarks/>
        Delete,

        /// <remarks/>
        NoChange,
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void GetRegistrationEntriesCompletedEventHandler(object sender,
                                                                     GetRegistrationEntriesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetRegistrationEntriesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetRegistrationEntriesCompletedEventArgs(object[] results,
                                                          Exception exception,
                                                          bool cancelled,
                                                          object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public RegistrationEntry[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((RegistrationEntry[])(results[0]));
            }
        }
    }
}

#pragma warning restore 1591