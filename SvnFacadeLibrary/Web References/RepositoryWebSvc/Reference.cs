//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
// 
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using SvnBridge.Properties;
#pragma warning disable 1591

namespace SvnBridge.RepositoryWebSvc
{
    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name="RepositorySoap", Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                        "/03")]
    public partial class Repository : SoapHttpClientProtocol
    {
        SendOrPostCallback AddConflictOperationCompleted;

        SendOrPostCallback CheckAuthenticationOperationCompleted;

        SendOrPostCallback CheckInOperationCompleted;

        SendOrPostCallback CheckPendingChangesOperationCompleted;

        SendOrPostCallback CreateAnnotationOperationCompleted;

        SendOrPostCallback CreateCheckinNoteDefinitionOperationCompleted;

        SendOrPostCallback CreateWorkspaceOperationCompleted;

        SendOrPostCallback DeleteAnnotationOperationCompleted;

        SendOrPostCallback DeleteLabelOperationCompleted;

        SendOrPostCallback DeleteShelvesetOperationCompleted;

        SendOrPostCallback DeleteWorkspaceOperationCompleted;

        SendOrPostCallback GetOperationCompleted;

        SendOrPostCallback GetRepositoryPropertiesOperationCompleted;

        SendOrPostCallback LabelItemOperationCompleted;

        SendOrPostCallback MergeOperationCompleted;

        SendOrPostCallback PendChangesOperationCompleted;

        SendOrPostCallback QueryAnnotationOperationCompleted;

        SendOrPostCallback QueryBranchesOperationCompleted;

        SendOrPostCallback QueryChangesetOperationCompleted;

        SendOrPostCallback QueryCheckinNoteDefinitionOperationCompleted;

        SendOrPostCallback QueryCheckinNoteFieldNamesOperationCompleted;

        SendOrPostCallback QueryConflictsOperationCompleted;

        SendOrPostCallback QueryEffectiveGlobalPermissionsOperationCompleted;

        SendOrPostCallback QueryEffectiveItemPermissionsOperationCompleted;

        SendOrPostCallback QueryFileTypesOperationCompleted;

        SendOrPostCallback QueryGlobalPermissionsOperationCompleted;

        SendOrPostCallback QueryHistoryOperationCompleted;

        SendOrPostCallback QueryItemsOperationCompleted;

        SendOrPostCallback QueryItemsExtendedOperationCompleted;

        SendOrPostCallback QueryItemPermissionsOperationCompleted;

        SendOrPostCallback QueryLabelsOperationCompleted;

        SendOrPostCallback QueryMergeCandidatesOperationCompleted;

        SendOrPostCallback QueryMergesOperationCompleted;

        SendOrPostCallback QueryPendingSetsOperationCompleted;

        SendOrPostCallback QueryShelvedChangesOperationCompleted;

        SendOrPostCallback QueryShelvesetsOperationCompleted;

        SendOrPostCallback QueryWorkspaceOperationCompleted;

        SendOrPostCallback QueryWorkspacesOperationCompleted;

        SendOrPostCallback RefreshIdentityDisplayNameOperationCompleted;

        SendOrPostCallback RemoveLocalConflictOperationCompleted;

        SendOrPostCallback ResolveOperationCompleted;

        SendOrPostCallback SetFileTypesOperationCompleted;

        SendOrPostCallback ShelveOperationCompleted;

        SendOrPostCallback UndoPendingChangesOperationCompleted;

        SendOrPostCallback UnlabelItemOperationCompleted;

        SendOrPostCallback UnshelveOperationCompleted;

        SendOrPostCallback UpdateChangesetOperationCompleted;

        SendOrPostCallback UpdateCheckinNoteFieldNameOperationCompleted;

        SendOrPostCallback UpdateGlobalSecurityOperationCompleted;

        SendOrPostCallback UpdateItemSecurityOperationCompleted;

        SendOrPostCallback UpdateLocalVersionOperationCompleted;

        SendOrPostCallback UpdatePendingStateOperationCompleted;

        SendOrPostCallback UpdateWorkspaceOperationCompleted;

        SendOrPostCallback QueryPendingChangesByIdOperationCompleted;

        SendOrPostCallback QueryItemsByIdOperationCompleted;

        SendOrPostCallback CreateTeamProjectFolderOperationCompleted;

        bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public Repository()
        {
            Url = Settings.Default.SvnFacade_Library_RepositoryWebSvc_Repository;
            if ((IsLocalFileSystemWebService(Url) == true))
            {
                UseDefaultCredentials = true;
                useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get { return base.Url; }
            set
            {
                if ((((IsLocalFileSystemWebService(base.Url) == true)
                      && (useDefaultCredentialsSetExplicitly == false))
                     && (IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get { return base.UseDefaultCredentials; }
            set
            {
                base.UseDefaultCredentials = value;
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event AddConflictCompletedEventHandler AddConflictCompleted;

        /// <remarks/>
        public event CheckAuthenticationCompletedEventHandler CheckAuthenticationCompleted;

        /// <remarks/>
        public event CheckInCompletedEventHandler CheckInCompleted;

        /// <remarks/>
        public event CheckPendingChangesCompletedEventHandler CheckPendingChangesCompleted;

        /// <remarks/>
        public event CreateAnnotationCompletedEventHandler CreateAnnotationCompleted;

        /// <remarks/>
        public event CreateCheckinNoteDefinitionCompletedEventHandler CreateCheckinNoteDefinitionCompleted;

        /// <remarks/>
        public event CreateWorkspaceCompletedEventHandler CreateWorkspaceCompleted;

        /// <remarks/>
        public event DeleteAnnotationCompletedEventHandler DeleteAnnotationCompleted;

        /// <remarks/>
        public event DeleteLabelCompletedEventHandler DeleteLabelCompleted;

        /// <remarks/>
        public event DeleteShelvesetCompletedEventHandler DeleteShelvesetCompleted;

        /// <remarks/>
        public event DeleteWorkspaceCompletedEventHandler DeleteWorkspaceCompleted;

        /// <remarks/>
        public event GetCompletedEventHandler GetCompleted;

        /// <remarks/>
        public event GetRepositoryPropertiesCompletedEventHandler GetRepositoryPropertiesCompleted;

        /// <remarks/>
        public event LabelItemCompletedEventHandler LabelItemCompleted;

        /// <remarks/>
        public event MergeCompletedEventHandler MergeCompleted;

        /// <remarks/>
        public event PendChangesCompletedEventHandler PendChangesCompleted;

        /// <remarks/>
        public event QueryAnnotationCompletedEventHandler QueryAnnotationCompleted;

        /// <remarks/>
        public event QueryBranchesCompletedEventHandler QueryBranchesCompleted;

        /// <remarks/>
        public event QueryChangesetCompletedEventHandler QueryChangesetCompleted;

        /// <remarks/>
        public event QueryCheckinNoteDefinitionCompletedEventHandler QueryCheckinNoteDefinitionCompleted;

        /// <remarks/>
        public event QueryCheckinNoteFieldNamesCompletedEventHandler QueryCheckinNoteFieldNamesCompleted;

        /// <remarks/>
        public event QueryConflictsCompletedEventHandler QueryConflictsCompleted;

        /// <remarks/>
        public event QueryEffectiveGlobalPermissionsCompletedEventHandler QueryEffectiveGlobalPermissionsCompleted;

        /// <remarks/>
        public event QueryEffectiveItemPermissionsCompletedEventHandler QueryEffectiveItemPermissionsCompleted;

        /// <remarks/>
        public event QueryFileTypesCompletedEventHandler QueryFileTypesCompleted;

        /// <remarks/>
        public event QueryGlobalPermissionsCompletedEventHandler QueryGlobalPermissionsCompleted;

        /// <remarks/>
        public event QueryHistoryCompletedEventHandler QueryHistoryCompleted;

        /// <remarks/>
        public event QueryItemsCompletedEventHandler QueryItemsCompleted;

        /// <remarks/>
        public event QueryItemsExtendedCompletedEventHandler QueryItemsExtendedCompleted;

        /// <remarks/>
        public event QueryItemPermissionsCompletedEventHandler QueryItemPermissionsCompleted;

        /// <remarks/>
        public event QueryLabelsCompletedEventHandler QueryLabelsCompleted;

        /// <remarks/>
        public event QueryMergeCandidatesCompletedEventHandler QueryMergeCandidatesCompleted;

        /// <remarks/>
        public event QueryMergesCompletedEventHandler QueryMergesCompleted;

        /// <remarks/>
        public event QueryPendingSetsCompletedEventHandler QueryPendingSetsCompleted;

        /// <remarks/>
        public event QueryShelvedChangesCompletedEventHandler QueryShelvedChangesCompleted;

        /// <remarks/>
        public event QueryShelvesetsCompletedEventHandler QueryShelvesetsCompleted;

        /// <remarks/>
        public event QueryWorkspaceCompletedEventHandler QueryWorkspaceCompleted;

        /// <remarks/>
        public event QueryWorkspacesCompletedEventHandler QueryWorkspacesCompleted;

        /// <remarks/>
        public event RefreshIdentityDisplayNameCompletedEventHandler RefreshIdentityDisplayNameCompleted;

        /// <remarks/>
        public event RemoveLocalConflictCompletedEventHandler RemoveLocalConflictCompleted;

        /// <remarks/>
        public event ResolveCompletedEventHandler ResolveCompleted;

        /// <remarks/>
        public event SetFileTypesCompletedEventHandler SetFileTypesCompleted;

        /// <remarks/>
        public event ShelveCompletedEventHandler ShelveCompleted;

        /// <remarks/>
        public event UndoPendingChangesCompletedEventHandler UndoPendingChangesCompleted;

        /// <remarks/>
        public event UnlabelItemCompletedEventHandler UnlabelItemCompleted;

        /// <remarks/>
        public event UnshelveCompletedEventHandler UnshelveCompleted;

        /// <remarks/>
        public event UpdateChangesetCompletedEventHandler UpdateChangesetCompleted;

        /// <remarks/>
        public event UpdateCheckinNoteFieldNameCompletedEventHandler UpdateCheckinNoteFieldNameCompleted;

        /// <remarks/>
        public event UpdateGlobalSecurityCompletedEventHandler UpdateGlobalSecurityCompleted;

        /// <remarks/>
        public event UpdateItemSecurityCompletedEventHandler UpdateItemSecurityCompleted;

        /// <remarks/>
        public event UpdateLocalVersionCompletedEventHandler UpdateLocalVersionCompleted;

        /// <remarks/>
        public event UpdatePendingStateCompletedEventHandler UpdatePendingStateCompleted;

        /// <remarks/>
        public event UpdateWorkspaceCompletedEventHandler UpdateWorkspaceCompleted;

        /// <remarks/>
        public event QueryPendingChangesByIdCompletedEventHandler QueryPendingChangesByIdCompleted;

        /// <remarks/>
        public event QueryItemsByIdCompletedEventHandler QueryItemsByIdCompleted;

        /// <remarks/>
        public event CreateTeamProjectFolderCompletedEventHandler CreateTeamProjectFolderCompleted;

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/AddConflict", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                         "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public void AddConflict(string workspaceName,
                                string ownerName,
                                ConflictType conflictType,
                                int itemId,
                                int versionFrom,
                                int pendingChangeId,
                                string sourceLocalItem,
                                string targetLocalItem,
                                int reason)
        {
            Invoke("AddConflict", new object[]
                                      {
                                          workspaceName,
                                          ownerName,
                                          conflictType,
                                          itemId,
                                          versionFrom,
                                          pendingChangeId,
                                          sourceLocalItem,
                                          targetLocalItem,
                                          reason
                                      });
        }

        /// <remarks/>
        public void AddConflictAsync(string workspaceName,
                                     string ownerName,
                                     ConflictType conflictType,
                                     int itemId,
                                     int versionFrom,
                                     int pendingChangeId,
                                     string sourceLocalItem,
                                     string targetLocalItem,
                                     int reason)
        {
            AddConflictAsync(workspaceName, ownerName, conflictType, itemId, versionFrom, pendingChangeId, sourceLocalItem, targetLocalItem, reason, null);
        }

        /// <remarks/>
        public void AddConflictAsync(string workspaceName,
                                     string ownerName,
                                     ConflictType conflictType,
                                     int itemId,
                                     int versionFrom,
                                     int pendingChangeId,
                                     string sourceLocalItem,
                                     string targetLocalItem,
                                     int reason,
                                     object userState)
        {
            if ((AddConflictOperationCompleted == null))
            {
                AddConflictOperationCompleted = new SendOrPostCallback(OnAddConflictOperationCompleted);
            }
            InvokeAsync("AddConflict", new object[]
                                           {
                                               workspaceName,
                                               ownerName,
                                               conflictType,
                                               itemId,
                                               versionFrom,
                                               pendingChangeId,
                                               sourceLocalItem,
                                               targetLocalItem,
                                               reason
                                           }, AddConflictOperationCompleted, userState);
        }

        void OnAddConflictOperationCompleted(object arg)
        {
            if ((AddConflictCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                AddConflictCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/CheckAuthentication", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                        "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                 "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public string CheckAuthentication()
        {
            object[] results = Invoke("CheckAuthentication", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckAuthenticationAsync()
        {
            CheckAuthenticationAsync(null);
        }

        /// <remarks/>
        public void CheckAuthenticationAsync(object userState)
        {
            if ((CheckAuthenticationOperationCompleted == null))
            {
                CheckAuthenticationOperationCompleted = new SendOrPostCallback(OnCheckAuthenticationOperationCompleted);
            }
            InvokeAsync("CheckAuthentication", new object[0], CheckAuthenticationOperationCompleted, userState);
        }

        void OnCheckAuthenticationOperationCompleted(object arg)
        {
            if ((CheckAuthenticationCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                CheckAuthenticationCompleted(this, new CheckAuthenticationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/CheckIn", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                            "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                     "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public CheckinResult CheckIn(string workspaceName,
                                     string ownerName,
                                     string[] serverItems,
                                     Changeset info,
                                     CheckinNotificationInfo checkinNotificationInfo,
                                     CheckinOptions checkinOptions,
                                     out Failure[] failures)
        {
            object[] results = Invoke("CheckIn", new object[]
                                                     {
                                                         workspaceName,
                                                         ownerName,
                                                         serverItems,
                                                         info,
                                                         checkinNotificationInfo,
                                                         checkinOptions
                                                     });
            failures = ((Failure[])(results[1]));
            return ((CheckinResult)(results[0]));
        }

        /// <remarks/>
        public void CheckInAsync(string workspaceName,
                                 string ownerName,
                                 string[] serverItems,
                                 Changeset info,
                                 CheckinNotificationInfo checkinNotificationInfo,
                                 CheckinOptions checkinOptions)
        {
            CheckInAsync(workspaceName, ownerName, serverItems, info, checkinNotificationInfo, checkinOptions, null);
        }

        /// <remarks/>
        public void CheckInAsync(string workspaceName,
                                 string ownerName,
                                 string[] serverItems,
                                 Changeset info,
                                 CheckinNotificationInfo checkinNotificationInfo,
                                 CheckinOptions checkinOptions,
                                 object userState)
        {
            if ((CheckInOperationCompleted == null))
            {
                CheckInOperationCompleted = new SendOrPostCallback(OnCheckInOperationCompleted);
            }
            InvokeAsync("CheckIn", new object[]
                                       {
                                           workspaceName,
                                           ownerName,
                                           serverItems,
                                           info,
                                           checkinNotificationInfo,
                                           checkinOptions
                                       }, CheckInOperationCompleted, userState);
        }

        void OnCheckInOperationCompleted(object arg)
        {
            if ((CheckInCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                CheckInCompleted(this, new CheckInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/CheckPendingChanges", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                        "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                 "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public Failure[] CheckPendingChanges(string workspaceName,
                                             string ownerName,
                                             string[] serverItems)
        {
            object[] results = Invoke("CheckPendingChanges", new object[]
                                                                 {
                                                                     workspaceName,
                                                                     ownerName,
                                                                     serverItems
                                                                 });
            return ((Failure[])(results[0]));
        }

        /// <remarks/>
        public void CheckPendingChangesAsync(string workspaceName,
                                             string ownerName,
                                             string[] serverItems)
        {
            CheckPendingChangesAsync(workspaceName, ownerName, serverItems, null);
        }

        /// <remarks/>
        public void CheckPendingChangesAsync(string workspaceName,
                                             string ownerName,
                                             string[] serverItems,
                                             object userState)
        {
            if ((CheckPendingChangesOperationCompleted == null))
            {
                CheckPendingChangesOperationCompleted = new SendOrPostCallback(OnCheckPendingChangesOperationCompleted);
            }
            InvokeAsync("CheckPendingChanges", new object[]
                                                   {
                                                       workspaceName,
                                                       ownerName,
                                                       serverItems
                                                   }, CheckPendingChangesOperationCompleted, userState);
        }

        void OnCheckPendingChangesOperationCompleted(object arg)
        {
            if ((CheckPendingChangesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                CheckPendingChangesCompleted(this, new CheckPendingChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/CreateAnnotation", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                     "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                              "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public void CreateAnnotation(string AnnotationName,
                                     string AnnotatedItem,
                                     int Version,
                                     string AnnotationValue,
                                     string Comment,
                                     bool Overwrite)
        {
            Invoke("CreateAnnotation", new object[]
                                           {
                                               AnnotationName,
                                               AnnotatedItem,
                                               Version,
                                               AnnotationValue,
                                               Comment,
                                               Overwrite
                                           });
        }

        /// <remarks/>
        public void CreateAnnotationAsync(string AnnotationName,
                                          string AnnotatedItem,
                                          int Version,
                                          string AnnotationValue,
                                          string Comment,
                                          bool Overwrite)
        {
            CreateAnnotationAsync(AnnotationName, AnnotatedItem, Version, AnnotationValue, Comment, Overwrite, null);
        }

        /// <remarks/>
        public void CreateAnnotationAsync(string AnnotationName,
                                          string AnnotatedItem,
                                          int Version,
                                          string AnnotationValue,
                                          string Comment,
                                          bool Overwrite,
                                          object userState)
        {
            if ((CreateAnnotationOperationCompleted == null))
            {
                CreateAnnotationOperationCompleted = new SendOrPostCallback(OnCreateAnnotationOperationCompleted);
            }
            InvokeAsync("CreateAnnotation", new object[]
                                                {
                                                    AnnotationName,
                                                    AnnotatedItem,
                                                    Version,
                                                    AnnotationValue,
                                                    Comment,
                                                    Overwrite
                                                }, CreateAnnotationOperationCompleted, userState);
        }

        void OnCreateAnnotationOperationCompleted(object arg)
        {
            if ((CreateAnnotationCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                CreateAnnotationCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/CreateCheckinNoteDefinition", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                         "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public void CreateCheckinNoteDefinition(string associatedServerItem,
                                                CheckinNoteFieldDefinition[] checkinNoteFields)
        {
            Invoke("CreateCheckinNoteDefinition", new object[]
                                                      {
                                                          associatedServerItem,
                                                          checkinNoteFields
                                                      });
        }

        /// <remarks/>
        public void CreateCheckinNoteDefinitionAsync(string associatedServerItem,
                                                     CheckinNoteFieldDefinition[] checkinNoteFields)
        {
            CreateCheckinNoteDefinitionAsync(associatedServerItem, checkinNoteFields, null);
        }

        /// <remarks/>
        public void CreateCheckinNoteDefinitionAsync(string associatedServerItem,
                                                     CheckinNoteFieldDefinition[] checkinNoteFields,
                                                     object userState)
        {
            if ((CreateCheckinNoteDefinitionOperationCompleted == null))
            {
                CreateCheckinNoteDefinitionOperationCompleted = new SendOrPostCallback(OnCreateCheckinNoteDefinitionOperationCompleted);
            }
            InvokeAsync("CreateCheckinNoteDefinition", new object[]
                                                           {
                                                               associatedServerItem,
                                                               checkinNoteFields
                                                           }, CreateCheckinNoteDefinitionOperationCompleted, userState);
        }

        void OnCreateCheckinNoteDefinitionOperationCompleted(object arg)
        {
            if ((CreateCheckinNoteDefinitionCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                CreateCheckinNoteDefinitionCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/CreateWorkspace", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                    "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                             "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public Workspace CreateWorkspace(Workspace workspace)
        {
            object[] results = Invoke("CreateWorkspace", new object[]
                                                             {
                                                                 workspace
                                                             });
            return ((Workspace)(results[0]));
        }

        /// <remarks/>
        public void CreateWorkspaceAsync(Workspace workspace)
        {
            CreateWorkspaceAsync(workspace, null);
        }

        /// <remarks/>
        public void CreateWorkspaceAsync(Workspace workspace,
                                         object userState)
        {
            if ((CreateWorkspaceOperationCompleted == null))
            {
                CreateWorkspaceOperationCompleted = new SendOrPostCallback(OnCreateWorkspaceOperationCompleted);
            }
            InvokeAsync("CreateWorkspace", new object[]
                                               {
                                                   workspace
                                               }, CreateWorkspaceOperationCompleted, userState);
        }

        void OnCreateWorkspaceOperationCompleted(object arg)
        {
            if ((CreateWorkspaceCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                CreateWorkspaceCompleted(this, new CreateWorkspaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/DeleteAnnotation", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                     "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                              "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public void DeleteAnnotation(string AnnotationName,
                                     string AnnotatedItem,
                                     int Version,
                                     string AnnotationValue)
        {
            Invoke("DeleteAnnotation", new object[]
                                           {
                                               AnnotationName,
                                               AnnotatedItem,
                                               Version,
                                               AnnotationValue
                                           });
        }

        /// <remarks/>
        public void DeleteAnnotationAsync(string AnnotationName,
                                          string AnnotatedItem,
                                          int Version,
                                          string AnnotationValue)
        {
            DeleteAnnotationAsync(AnnotationName, AnnotatedItem, Version, AnnotationValue, null);
        }

        /// <remarks/>
        public void DeleteAnnotationAsync(string AnnotationName,
                                          string AnnotatedItem,
                                          int Version,
                                          string AnnotationValue,
                                          object userState)
        {
            if ((DeleteAnnotationOperationCompleted == null))
            {
                DeleteAnnotationOperationCompleted = new SendOrPostCallback(OnDeleteAnnotationOperationCompleted);
            }
            InvokeAsync("DeleteAnnotation", new object[]
                                                {
                                                    AnnotationName,
                                                    AnnotatedItem,
                                                    Version,
                                                    AnnotationValue
                                                }, DeleteAnnotationOperationCompleted, userState);
        }

        void OnDeleteAnnotationOperationCompleted(object arg)
        {
            if ((DeleteAnnotationCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                DeleteAnnotationCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/DeleteLabel", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                         "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public LabelResult[] DeleteLabel(string labelName,
                                         string labelScope)
        {
            object[] results = Invoke("DeleteLabel", new object[]
                                                         {
                                                             labelName,
                                                             labelScope
                                                         });
            return ((LabelResult[])(results[0]));
        }

        /// <remarks/>
        public void DeleteLabelAsync(string labelName,
                                     string labelScope)
        {
            DeleteLabelAsync(labelName, labelScope, null);
        }

        /// <remarks/>
        public void DeleteLabelAsync(string labelName,
                                     string labelScope,
                                     object userState)
        {
            if ((DeleteLabelOperationCompleted == null))
            {
                DeleteLabelOperationCompleted = new SendOrPostCallback(OnDeleteLabelOperationCompleted);
            }
            InvokeAsync("DeleteLabel", new object[]
                                           {
                                               labelName,
                                               labelScope
                                           }, DeleteLabelOperationCompleted, userState);
        }

        void OnDeleteLabelOperationCompleted(object arg)
        {
            if ((DeleteLabelCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                DeleteLabelCompleted(this, new DeleteLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/DeleteShelveset", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                    "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                             "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public void DeleteShelveset(string shelvesetName,
                                    string ownerName)
        {
            Invoke("DeleteShelveset", new object[]
                                          {
                                              shelvesetName,
                                              ownerName
                                          });
        }

        /// <remarks/>
        public void DeleteShelvesetAsync(string shelvesetName,
                                         string ownerName)
        {
            DeleteShelvesetAsync(shelvesetName, ownerName, null);
        }

        /// <remarks/>
        public void DeleteShelvesetAsync(string shelvesetName,
                                         string ownerName,
                                         object userState)
        {
            if ((DeleteShelvesetOperationCompleted == null))
            {
                DeleteShelvesetOperationCompleted = new SendOrPostCallback(OnDeleteShelvesetOperationCompleted);
            }
            InvokeAsync("DeleteShelveset", new object[]
                                               {
                                                   shelvesetName,
                                                   ownerName
                                               }, DeleteShelvesetOperationCompleted, userState);
        }

        void OnDeleteShelvesetOperationCompleted(object arg)
        {
            if ((DeleteShelvesetCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                DeleteShelvesetCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/DeleteWorkspace", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                    "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                             "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public void DeleteWorkspace(string workspaceName,
                                    string ownerName)
        {
            Invoke("DeleteWorkspace", new object[]
                                          {
                                              workspaceName,
                                              ownerName
                                          });
        }

        /// <remarks/>
        public void DeleteWorkspaceAsync(string workspaceName,
                                         string ownerName)
        {
            DeleteWorkspaceAsync(workspaceName, ownerName, null);
        }

        /// <remarks/>
        public void DeleteWorkspaceAsync(string workspaceName,
                                         string ownerName,
                                         object userState)
        {
            if ((DeleteWorkspaceOperationCompleted == null))
            {
                DeleteWorkspaceOperationCompleted = new SendOrPostCallback(OnDeleteWorkspaceOperationCompleted);
            }
            InvokeAsync("DeleteWorkspace", new object[]
                                               {
                                                   workspaceName,
                                                   ownerName
                                               }, DeleteWorkspaceOperationCompleted, userState);
        }

        void OnDeleteWorkspaceOperationCompleted(object arg)
        {
            if ((DeleteWorkspaceCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                DeleteWorkspaceCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/Get", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                        "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                 "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        [return : XmlArrayItem("ArrayOfGetOperation")]
        [return : XmlArrayItem(NestingLevel=1)]
        public GetOperation[][] Get(string workspaceName,
                                    string ownerName,
                                    GetRequest[] requests,
                                    bool force,
                                    bool noGet)
        {
            object[] results = Invoke("Get", new object[]
                                                 {
                                                     workspaceName,
                                                     ownerName,
                                                     requests,
                                                     force,
                                                     noGet
                                                 });
            return ((GetOperation[][])(results[0]));
        }

        /// <remarks/>
        public void GetAsync(string workspaceName,
                             string ownerName,
                             GetRequest[] requests,
                             bool force,
                             bool noGet)
        {
            GetAsync(workspaceName, ownerName, requests, force, noGet, null);
        }

        /// <remarks/>
        public void GetAsync(string workspaceName,
                             string ownerName,
                             GetRequest[] requests,
                             bool force,
                             bool noGet,
                             object userState)
        {
            if ((GetOperationCompleted == null))
            {
                GetOperationCompleted = new SendOrPostCallback(OnGetOperationCompleted);
            }
            InvokeAsync("Get", new object[]
                                   {
                                       workspaceName,
                                       ownerName,
                                       requests,
                                       force,
                                       noGet
                                   }, GetOperationCompleted, userState);
        }

        void OnGetOperationCompleted(object arg)
        {
            if ((GetCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetCompleted(this, new GetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/GetRepositoryProperties", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                            "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                     "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public RepositoryProperties GetRepositoryProperties()
        {
            object[] results = Invoke("GetRepositoryProperties", new object[0]);
            return ((RepositoryProperties)(results[0]));
        }

        /// <remarks/>
        public void GetRepositoryPropertiesAsync()
        {
            GetRepositoryPropertiesAsync(null);
        }

        /// <remarks/>
        public void GetRepositoryPropertiesAsync(object userState)
        {
            if ((GetRepositoryPropertiesOperationCompleted == null))
            {
                GetRepositoryPropertiesOperationCompleted = new SendOrPostCallback(OnGetRepositoryPropertiesOperationCompleted);
            }
            InvokeAsync("GetRepositoryProperties", new object[0], GetRepositoryPropertiesOperationCompleted, userState);
        }

        void OnGetRepositoryPropertiesOperationCompleted(object arg)
        {
            if ((GetRepositoryPropertiesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetRepositoryPropertiesCompleted(this, new GetRepositoryPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/LabelItem", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                              "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                       "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public LabelResult[] LabelItem(string workspaceName,
                                       string workspaceOwner,
                                       VersionControlLabel label,
                                       LabelItemSpec[] labelSpecs,
                                       LabelChildOption children,
                                       out Failure[] failures)
        {
            object[] results = Invoke("LabelItem", new object[]
                                                       {
                                                           workspaceName,
                                                           workspaceOwner,
                                                           label,
                                                           labelSpecs,
                                                           children
                                                       });
            failures = ((Failure[])(results[1]));
            return ((LabelResult[])(results[0]));
        }

        /// <remarks/>
        public void LabelItemAsync(string workspaceName,
                                   string workspaceOwner,
                                   VersionControlLabel label,
                                   LabelItemSpec[] labelSpecs,
                                   LabelChildOption children)
        {
            LabelItemAsync(workspaceName, workspaceOwner, label, labelSpecs, children, null);
        }

        /// <remarks/>
        public void LabelItemAsync(string workspaceName,
                                   string workspaceOwner,
                                   VersionControlLabel label,
                                   LabelItemSpec[] labelSpecs,
                                   LabelChildOption children,
                                   object userState)
        {
            if ((LabelItemOperationCompleted == null))
            {
                LabelItemOperationCompleted = new SendOrPostCallback(OnLabelItemOperationCompleted);
            }
            InvokeAsync("LabelItem", new object[]
                                         {
                                             workspaceName,
                                             workspaceOwner,
                                             label,
                                             labelSpecs,
                                             children
                                         }, LabelItemOperationCompleted, userState);
        }

        void OnLabelItemOperationCompleted(object arg)
        {
            if ((LabelItemCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                LabelItemCompleted(this, new LabelItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/Merge", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                          "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                   "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public GetOperation[] Merge(string workspaceName,
                                    string workspaceOwner,
                                    ItemSpec source,
                                    ItemSpec target,
                                    VersionSpec from,
                                    VersionSpec to,
                                    MergeOptions options,
                                    LockLevel lockLevel,
                                    out Failure[] failures,
                                    out Conflict[] conflicts)
        {
            object[] results = Invoke("Merge", new object[]
                                                   {
                                                       workspaceName,
                                                       workspaceOwner,
                                                       source,
                                                       target,
                                                       from,
                                                       to,
                                                       options,
                                                       lockLevel
                                                   });
            failures = ((Failure[])(results[1]));
            conflicts = ((Conflict[])(results[2]));
            return ((GetOperation[])(results[0]));
        }

        /// <remarks/>
        public void MergeAsync(string workspaceName,
                               string workspaceOwner,
                               ItemSpec source,
                               ItemSpec target,
                               VersionSpec from,
                               VersionSpec to,
                               MergeOptions options,
                               LockLevel lockLevel)
        {
            MergeAsync(workspaceName, workspaceOwner, source, target, from, to, options, lockLevel, null);
        }

        /// <remarks/>
        public void MergeAsync(string workspaceName,
                               string workspaceOwner,
                               ItemSpec source,
                               ItemSpec target,
                               VersionSpec from,
                               VersionSpec to,
                               MergeOptions options,
                               LockLevel lockLevel,
                               object userState)
        {
            if ((MergeOperationCompleted == null))
            {
                MergeOperationCompleted = new SendOrPostCallback(OnMergeOperationCompleted);
            }
            InvokeAsync("Merge", new object[]
                                     {
                                         workspaceName,
                                         workspaceOwner,
                                         source,
                                         target,
                                         from,
                                         to,
                                         options,
                                         lockLevel
                                     }, MergeOperationCompleted, userState);
        }

        void OnMergeOperationCompleted(object arg)
        {
            if ((MergeCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                MergeCompleted(this, new MergeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/PendChanges", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                         "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public GetOperation[] PendChanges(string workspaceName,
                                          string ownerName,
                                          ChangeRequest[] changes,
                                          out Failure[] failures)
        {
            object[] results = Invoke("PendChanges", new object[]
                                                         {
                                                             workspaceName,
                                                             ownerName,
                                                             changes
                                                         });
            failures = ((Failure[])(results[1]));
            return ((GetOperation[])(results[0]));
        }

        /// <remarks/>
        public void PendChangesAsync(string workspaceName,
                                     string ownerName,
                                     ChangeRequest[] changes)
        {
            PendChangesAsync(workspaceName, ownerName, changes, null);
        }

        /// <remarks/>
        public void PendChangesAsync(string workspaceName,
                                     string ownerName,
                                     ChangeRequest[] changes,
                                     object userState)
        {
            if ((PendChangesOperationCompleted == null))
            {
                PendChangesOperationCompleted = new SendOrPostCallback(OnPendChangesOperationCompleted);
            }
            InvokeAsync("PendChanges", new object[]
                                           {
                                               workspaceName,
                                               ownerName,
                                               changes
                                           }, PendChangesOperationCompleted, userState);
        }

        void OnPendChangesOperationCompleted(object arg)
        {
            if ((PendChangesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                PendChangesCompleted(this, new PendChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryAnnotation", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                    "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                             "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public Annotation[] QueryAnnotation(string annotationName,
                                            string annotatedItem,
                                            int version)
        {
            object[] results = Invoke("QueryAnnotation", new object[]
                                                             {
                                                                 annotationName,
                                                                 annotatedItem,
                                                                 version
                                                             });
            return ((Annotation[])(results[0]));
        }

        /// <remarks/>
        public void QueryAnnotationAsync(string annotationName,
                                         string annotatedItem,
                                         int version)
        {
            QueryAnnotationAsync(annotationName, annotatedItem, version, null);
        }

        /// <remarks/>
        public void QueryAnnotationAsync(string annotationName,
                                         string annotatedItem,
                                         int version,
                                         object userState)
        {
            if ((QueryAnnotationOperationCompleted == null))
            {
                QueryAnnotationOperationCompleted = new SendOrPostCallback(OnQueryAnnotationOperationCompleted);
            }
            InvokeAsync("QueryAnnotation", new object[]
                                               {
                                                   annotationName,
                                                   annotatedItem,
                                                   version
                                               }, QueryAnnotationOperationCompleted, userState);
        }

        void OnQueryAnnotationOperationCompleted(object arg)
        {
            if ((QueryAnnotationCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryAnnotationCompleted(this, new QueryAnnotationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryBranches", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                  "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                           "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        [return : XmlArrayItem("ArrayOfBranchRelative")]
        [return : XmlArrayItem(NestingLevel=1)]
        public BranchRelative[][] QueryBranches(string workspaceName,
                                                string workspaceOwner,
                                                ItemSpec[] items,
                                                VersionSpec version)
        {
            object[] results = Invoke("QueryBranches", new object[]
                                                           {
                                                               workspaceName,
                                                               workspaceOwner,
                                                               items,
                                                               version
                                                           });
            return ((BranchRelative[][])(results[0]));
        }

        /// <remarks/>
        public void QueryBranchesAsync(string workspaceName,
                                       string workspaceOwner,
                                       ItemSpec[] items,
                                       VersionSpec version)
        {
            QueryBranchesAsync(workspaceName, workspaceOwner, items, version, null);
        }

        /// <remarks/>
        public void QueryBranchesAsync(string workspaceName,
                                       string workspaceOwner,
                                       ItemSpec[] items,
                                       VersionSpec version,
                                       object userState)
        {
            if ((QueryBranchesOperationCompleted == null))
            {
                QueryBranchesOperationCompleted = new SendOrPostCallback(OnQueryBranchesOperationCompleted);
            }
            InvokeAsync("QueryBranches", new object[]
                                             {
                                                 workspaceName,
                                                 workspaceOwner,
                                                 items,
                                                 version
                                             }, QueryBranchesOperationCompleted, userState);
        }

        void OnQueryBranchesOperationCompleted(object arg)
        {
            if ((QueryBranchesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryBranchesCompleted(this, new QueryBranchesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryChangeset", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                   "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                            "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public Changeset QueryChangeset(int changesetId,
                                        bool includeChanges,
                                        bool generateDownloadUrls)
        {
            object[] results = Invoke("QueryChangeset", new object[]
                                                            {
                                                                changesetId,
                                                                includeChanges,
                                                                generateDownloadUrls
                                                            });
            return ((Changeset)(results[0]));
        }

        /// <remarks/>
        public void QueryChangesetAsync(int changesetId,
                                        bool includeChanges,
                                        bool generateDownloadUrls)
        {
            QueryChangesetAsync(changesetId, includeChanges, generateDownloadUrls, null);
        }

        /// <remarks/>
        public void QueryChangesetAsync(int changesetId,
                                        bool includeChanges,
                                        bool generateDownloadUrls,
                                        object userState)
        {
            if ((QueryChangesetOperationCompleted == null))
            {
                QueryChangesetOperationCompleted = new SendOrPostCallback(OnQueryChangesetOperationCompleted);
            }
            InvokeAsync("QueryChangeset", new object[]
                                              {
                                                  changesetId,
                                                  includeChanges,
                                                  generateDownloadUrls
                                              }, QueryChangesetOperationCompleted, userState);
        }

        void OnQueryChangesetOperationCompleted(object arg)
        {
            if ((QueryChangesetCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryChangesetCompleted(this, new QueryChangesetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryCheckinNoteDefinition", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                               "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                        "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public CheckinNoteFieldDefinition[] QueryCheckinNoteDefinition(string[] associatedServerItem)
        {
            object[] results = Invoke("QueryCheckinNoteDefinition", new object[]
                                                                        {
                                                                            associatedServerItem
                                                                        });
            return ((CheckinNoteFieldDefinition[])(results[0]));
        }

        /// <remarks/>
        public void QueryCheckinNoteDefinitionAsync(string[] associatedServerItem)
        {
            QueryCheckinNoteDefinitionAsync(associatedServerItem, null);
        }

        /// <remarks/>
        public void QueryCheckinNoteDefinitionAsync(string[] associatedServerItem,
                                                    object userState)
        {
            if ((QueryCheckinNoteDefinitionOperationCompleted == null))
            {
                QueryCheckinNoteDefinitionOperationCompleted = new SendOrPostCallback(OnQueryCheckinNoteDefinitionOperationCompleted);
            }
            InvokeAsync("QueryCheckinNoteDefinition", new object[]
                                                          {
                                                              associatedServerItem
                                                          }, QueryCheckinNoteDefinitionOperationCompleted, userState);
        }

        void OnQueryCheckinNoteDefinitionOperationCompleted(object arg)
        {
            if ((QueryCheckinNoteDefinitionCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryCheckinNoteDefinitionCompleted(this, new QueryCheckinNoteDefinitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryCheckinNoteFieldNames", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                               "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                        "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public string[] QueryCheckinNoteFieldNames()
        {
            object[] results = Invoke("QueryCheckinNoteFieldNames", new object[0]);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void QueryCheckinNoteFieldNamesAsync()
        {
            QueryCheckinNoteFieldNamesAsync(null);
        }

        /// <remarks/>
        public void QueryCheckinNoteFieldNamesAsync(object userState)
        {
            if ((QueryCheckinNoteFieldNamesOperationCompleted == null))
            {
                QueryCheckinNoteFieldNamesOperationCompleted = new SendOrPostCallback(OnQueryCheckinNoteFieldNamesOperationCompleted);
            }
            InvokeAsync("QueryCheckinNoteFieldNames", new object[0], QueryCheckinNoteFieldNamesOperationCompleted, userState);
        }

        void OnQueryCheckinNoteFieldNamesOperationCompleted(object arg)
        {
            if ((QueryCheckinNoteFieldNamesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryCheckinNoteFieldNamesCompleted(this, new QueryCheckinNoteFieldNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryConflicts", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                   "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                            "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public Conflict[] QueryConflicts(string workspaceName,
                                         string ownerName,
                                         ItemSpec[] items)
        {
            object[] results = Invoke("QueryConflicts", new object[]
                                                            {
                                                                workspaceName,
                                                                ownerName,
                                                                items
                                                            });
            return ((Conflict[])(results[0]));
        }

        /// <remarks/>
        public void QueryConflictsAsync(string workspaceName,
                                        string ownerName,
                                        ItemSpec[] items)
        {
            QueryConflictsAsync(workspaceName, ownerName, items, null);
        }

        /// <remarks/>
        public void QueryConflictsAsync(string workspaceName,
                                        string ownerName,
                                        ItemSpec[] items,
                                        object userState)
        {
            if ((QueryConflictsOperationCompleted == null))
            {
                QueryConflictsOperationCompleted = new SendOrPostCallback(OnQueryConflictsOperationCompleted);
            }
            InvokeAsync("QueryConflicts", new object[]
                                              {
                                                  workspaceName,
                                                  ownerName,
                                                  items
                                              }, QueryConflictsOperationCompleted, userState);
        }

        void OnQueryConflictsOperationCompleted(object arg)
        {
            if ((QueryConflictsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryConflictsCompleted(this, new QueryConflictsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryEffectiveGlobalPermissions", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                    "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                             "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public string[] QueryEffectiveGlobalPermissions(string identityName)
        {
            object[] results = Invoke("QueryEffectiveGlobalPermissions", new object[]
                                                                             {
                                                                                 identityName
                                                                             });
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void QueryEffectiveGlobalPermissionsAsync(string identityName)
        {
            QueryEffectiveGlobalPermissionsAsync(identityName, null);
        }

        /// <remarks/>
        public void QueryEffectiveGlobalPermissionsAsync(string identityName,
                                                         object userState)
        {
            if ((QueryEffectiveGlobalPermissionsOperationCompleted == null))
            {
                QueryEffectiveGlobalPermissionsOperationCompleted = new SendOrPostCallback(OnQueryEffectiveGlobalPermissionsOperationCompleted);
            }
            InvokeAsync("QueryEffectiveGlobalPermissions", new object[]
                                                               {
                                                                   identityName
                                                               }, QueryEffectiveGlobalPermissionsOperationCompleted, userState);
        }

        void OnQueryEffectiveGlobalPermissionsOperationCompleted(object arg)
        {
            if ((QueryEffectiveGlobalPermissionsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryEffectiveGlobalPermissionsCompleted(this, new QueryEffectiveGlobalPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryEffectiveItemPermissions", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                  "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                           "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public string[] QueryEffectiveItemPermissions(string workspaceName,
                                                      string workspaceOwner,
                                                      string item,
                                                      string identityName)
        {
            object[] results = Invoke("QueryEffectiveItemPermissions", new object[]
                                                                           {
                                                                               workspaceName,
                                                                               workspaceOwner,
                                                                               item,
                                                                               identityName
                                                                           });
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void QueryEffectiveItemPermissionsAsync(string workspaceName,
                                                       string workspaceOwner,
                                                       string item,
                                                       string identityName)
        {
            QueryEffectiveItemPermissionsAsync(workspaceName, workspaceOwner, item, identityName, null);
        }

        /// <remarks/>
        public void QueryEffectiveItemPermissionsAsync(string workspaceName,
                                                       string workspaceOwner,
                                                       string item,
                                                       string identityName,
                                                       object userState)
        {
            if ((QueryEffectiveItemPermissionsOperationCompleted == null))
            {
                QueryEffectiveItemPermissionsOperationCompleted = new SendOrPostCallback(OnQueryEffectiveItemPermissionsOperationCompleted);
            }
            InvokeAsync("QueryEffectiveItemPermissions", new object[]
                                                             {
                                                                 workspaceName,
                                                                 workspaceOwner,
                                                                 item,
                                                                 identityName
                                                             }, QueryEffectiveItemPermissionsOperationCompleted, userState);
        }

        void OnQueryEffectiveItemPermissionsOperationCompleted(object arg)
        {
            if ((QueryEffectiveItemPermissionsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryEffectiveItemPermissionsCompleted(this, new QueryEffectiveItemPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryFileTypes", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                   "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                            "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public FileType[] QueryFileTypes()
        {
            object[] results = Invoke("QueryFileTypes", new object[0]);
            return ((FileType[])(results[0]));
        }

        /// <remarks/>
        public void QueryFileTypesAsync()
        {
            QueryFileTypesAsync(null);
        }

        /// <remarks/>
        public void QueryFileTypesAsync(object userState)
        {
            if ((QueryFileTypesOperationCompleted == null))
            {
                QueryFileTypesOperationCompleted = new SendOrPostCallback(OnQueryFileTypesOperationCompleted);
            }
            InvokeAsync("QueryFileTypes", new object[0], QueryFileTypesOperationCompleted, userState);
        }

        void OnQueryFileTypesOperationCompleted(object arg)
        {
            if ((QueryFileTypesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryFileTypesCompleted(this, new QueryFileTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryGlobalPermissions", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                           "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                    "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public GlobalSecurity QueryGlobalPermissions(string[] identityNames)
        {
            object[] results = Invoke("QueryGlobalPermissions", new object[]
                                                                    {
                                                                        identityNames
                                                                    });
            return ((GlobalSecurity)(results[0]));
        }

        /// <remarks/>
        public void QueryGlobalPermissionsAsync(string[] identityNames)
        {
            QueryGlobalPermissionsAsync(identityNames, null);
        }

        /// <remarks/>
        public void QueryGlobalPermissionsAsync(string[] identityNames,
                                                object userState)
        {
            if ((QueryGlobalPermissionsOperationCompleted == null))
            {
                QueryGlobalPermissionsOperationCompleted = new SendOrPostCallback(OnQueryGlobalPermissionsOperationCompleted);
            }
            InvokeAsync("QueryGlobalPermissions", new object[]
                                                      {
                                                          identityNames
                                                      }, QueryGlobalPermissionsOperationCompleted, userState);
        }

        void OnQueryGlobalPermissionsOperationCompleted(object arg)
        {
            if ((QueryGlobalPermissionsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryGlobalPermissionsCompleted(this, new QueryGlobalPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryHistory", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                 "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                          "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public Changeset[] QueryHistory(string workspaceName,
                                        string workspaceOwner,
                                        ItemSpec itemSpec,
                                        VersionSpec versionItem,
                                        string user,
                                        VersionSpec versionFrom,
                                        VersionSpec versionTo,
                                        int maxCount,
                                        bool includeFiles,
                                        bool generateDownloadUrls,
                                        bool slotMode)
        {
            object[] results = Invoke("QueryHistory", new object[]
                                                          {
                                                              workspaceName,
                                                              workspaceOwner,
                                                              itemSpec,
                                                              versionItem,
                                                              user,
                                                              versionFrom,
                                                              versionTo,
                                                              maxCount,
                                                              includeFiles,
                                                              generateDownloadUrls,
                                                              slotMode
                                                          });
            return ((Changeset[])(results[0]));
        }

        /// <remarks/>
        public void QueryHistoryAsync(string workspaceName,
                                      string workspaceOwner,
                                      ItemSpec itemSpec,
                                      VersionSpec versionItem,
                                      string user,
                                      VersionSpec versionFrom,
                                      VersionSpec versionTo,
                                      int maxCount,
                                      bool includeFiles,
                                      bool generateDownloadUrls,
                                      bool slotMode)
        {
            QueryHistoryAsync(workspaceName, workspaceOwner, itemSpec, versionItem, user, versionFrom, versionTo, maxCount, includeFiles, generateDownloadUrls, slotMode, null);
        }

        /// <remarks/>
        public void QueryHistoryAsync(string workspaceName,
                                      string workspaceOwner,
                                      ItemSpec itemSpec,
                                      VersionSpec versionItem,
                                      string user,
                                      VersionSpec versionFrom,
                                      VersionSpec versionTo,
                                      int maxCount,
                                      bool includeFiles,
                                      bool generateDownloadUrls,
                                      bool slotMode,
                                      object userState)
        {
            if ((QueryHistoryOperationCompleted == null))
            {
                QueryHistoryOperationCompleted = new SendOrPostCallback(OnQueryHistoryOperationCompleted);
            }
            InvokeAsync("QueryHistory", new object[]
                                            {
                                                workspaceName,
                                                workspaceOwner,
                                                itemSpec,
                                                versionItem,
                                                user,
                                                versionFrom,
                                                versionTo,
                                                maxCount,
                                                includeFiles,
                                                generateDownloadUrls,
                                                slotMode
                                            }, QueryHistoryOperationCompleted, userState);
        }

        void OnQueryHistoryOperationCompleted(object arg)
        {
            if ((QueryHistoryCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryHistoryCompleted(this, new QueryHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryItems", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                               "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                        "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public ItemSet[] QueryItems(string workspaceName,
                                    string workspaceOwner,
                                    ItemSpec[] items,
                                    VersionSpec version,
                                    DeletedState deletedState,
                                    ItemType itemType,
                                    bool generateDownloadUrls)
        {
            object[] results = Invoke("QueryItems", new object[]
                                                        {
                                                            workspaceName,
                                                            workspaceOwner,
                                                            items,
                                                            version,
                                                            deletedState,
                                                            itemType,
                                                            generateDownloadUrls
                                                        });
            return ((ItemSet[])(results[0]));
        }

        /// <remarks/>
        public void QueryItemsAsync(string workspaceName,
                                    string workspaceOwner,
                                    ItemSpec[] items,
                                    VersionSpec version,
                                    DeletedState deletedState,
                                    ItemType itemType,
                                    bool generateDownloadUrls)
        {
            QueryItemsAsync(workspaceName, workspaceOwner, items, version, deletedState, itemType, generateDownloadUrls, null);
        }

        /// <remarks/>
        public void QueryItemsAsync(string workspaceName,
                                    string workspaceOwner,
                                    ItemSpec[] items,
                                    VersionSpec version,
                                    DeletedState deletedState,
                                    ItemType itemType,
                                    bool generateDownloadUrls,
                                    object userState)
        {
            if ((QueryItemsOperationCompleted == null))
            {
                QueryItemsOperationCompleted = new SendOrPostCallback(OnQueryItemsOperationCompleted);
            }
            InvokeAsync("QueryItems", new object[]
                                          {
                                              workspaceName,
                                              workspaceOwner,
                                              items,
                                              version,
                                              deletedState,
                                              itemType,
                                              generateDownloadUrls
                                          }, QueryItemsOperationCompleted, userState);
        }

        void OnQueryItemsOperationCompleted(object arg)
        {
            if ((QueryItemsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryItemsCompleted(this, new QueryItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryItemsExtended", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                       "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        [return : XmlArrayItem("ArrayOfExtendedItem")]
        [return : XmlArrayItem(NestingLevel=1)]
        public ExtendedItem[][] QueryItemsExtended(string workspaceName,
                                                   string workspaceOwner,
                                                   ItemSpec[] items,
                                                   DeletedState deletedState,
                                                   ItemType itemType)
        {
            object[] results = Invoke("QueryItemsExtended", new object[]
                                                                {
                                                                    workspaceName,
                                                                    workspaceOwner,
                                                                    items,
                                                                    deletedState,
                                                                    itemType
                                                                });
            return ((ExtendedItem[][])(results[0]));
        }

        /// <remarks/>
        public void QueryItemsExtendedAsync(string workspaceName,
                                            string workspaceOwner,
                                            ItemSpec[] items,
                                            DeletedState deletedState,
                                            ItemType itemType)
        {
            QueryItemsExtendedAsync(workspaceName, workspaceOwner, items, deletedState, itemType, null);
        }

        /// <remarks/>
        public void QueryItemsExtendedAsync(string workspaceName,
                                            string workspaceOwner,
                                            ItemSpec[] items,
                                            DeletedState deletedState,
                                            ItemType itemType,
                                            object userState)
        {
            if ((QueryItemsExtendedOperationCompleted == null))
            {
                QueryItemsExtendedOperationCompleted = new SendOrPostCallback(OnQueryItemsExtendedOperationCompleted);
            }
            InvokeAsync("QueryItemsExtended", new object[]
                                                  {
                                                      workspaceName,
                                                      workspaceOwner,
                                                      items,
                                                      deletedState,
                                                      itemType
                                                  }, QueryItemsExtendedOperationCompleted, userState);
        }

        void OnQueryItemsExtendedOperationCompleted(object arg)
        {
            if ((QueryItemsExtendedCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryItemsExtendedCompleted(this, new QueryItemsExtendedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryItemPermissions", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                         "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                  "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public ItemSecurity[] QueryItemPermissions(string workspaceName,
                                                   string workspaceOwner,
                                                   ItemSpec[] itemSpecs,
                                                   string[] identityNames,
                                                   out Failure[] failures)
        {
            object[] results = Invoke("QueryItemPermissions", new object[]
                                                                  {
                                                                      workspaceName,
                                                                      workspaceOwner,
                                                                      itemSpecs,
                                                                      identityNames
                                                                  });
            failures = ((Failure[])(results[1]));
            return ((ItemSecurity[])(results[0]));
        }

        /// <remarks/>
        public void QueryItemPermissionsAsync(string workspaceName,
                                              string workspaceOwner,
                                              ItemSpec[] itemSpecs,
                                              string[] identityNames)
        {
            QueryItemPermissionsAsync(workspaceName, workspaceOwner, itemSpecs, identityNames, null);
        }

        /// <remarks/>
        public void QueryItemPermissionsAsync(string workspaceName,
                                              string workspaceOwner,
                                              ItemSpec[] itemSpecs,
                                              string[] identityNames,
                                              object userState)
        {
            if ((QueryItemPermissionsOperationCompleted == null))
            {
                QueryItemPermissionsOperationCompleted = new SendOrPostCallback(OnQueryItemPermissionsOperationCompleted);
            }
            InvokeAsync("QueryItemPermissions", new object[]
                                                    {
                                                        workspaceName,
                                                        workspaceOwner,
                                                        itemSpecs,
                                                        identityNames
                                                    }, QueryItemPermissionsOperationCompleted, userState);
        }

        void OnQueryItemPermissionsOperationCompleted(object arg)
        {
            if ((QueryItemPermissionsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryItemPermissionsCompleted(this, new QueryItemPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryLabels", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                         "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public VersionControlLabel[] QueryLabels(string workspaceName,
                                                 string workspaceOwner,
                                                 string labelName,
                                                 string labelScope,
                                                 string owner,
                                                 string filterItem,
                                                 VersionSpec versionFilterItem,
                                                 bool includeItems,
                                                 bool generateDownloadUrls)
        {
            object[] results = Invoke("QueryLabels", new object[]
                                                         {
                                                             workspaceName,
                                                             workspaceOwner,
                                                             labelName,
                                                             labelScope,
                                                             owner,
                                                             filterItem,
                                                             versionFilterItem,
                                                             includeItems,
                                                             generateDownloadUrls
                                                         });
            return ((VersionControlLabel[])(results[0]));
        }

        /// <remarks/>
        public void QueryLabelsAsync(string workspaceName,
                                     string workspaceOwner,
                                     string labelName,
                                     string labelScope,
                                     string owner,
                                     string filterItem,
                                     VersionSpec versionFilterItem,
                                     bool includeItems,
                                     bool generateDownloadUrls)
        {
            QueryLabelsAsync(workspaceName, workspaceOwner, labelName, labelScope, owner, filterItem, versionFilterItem, includeItems, generateDownloadUrls, null);
        }

        /// <remarks/>
        public void QueryLabelsAsync(string workspaceName,
                                     string workspaceOwner,
                                     string labelName,
                                     string labelScope,
                                     string owner,
                                     string filterItem,
                                     VersionSpec versionFilterItem,
                                     bool includeItems,
                                     bool generateDownloadUrls,
                                     object userState)
        {
            if ((QueryLabelsOperationCompleted == null))
            {
                QueryLabelsOperationCompleted = new SendOrPostCallback(OnQueryLabelsOperationCompleted);
            }
            InvokeAsync("QueryLabels", new object[]
                                           {
                                               workspaceName,
                                               workspaceOwner,
                                               labelName,
                                               labelScope,
                                               owner,
                                               filterItem,
                                               versionFilterItem,
                                               includeItems,
                                               generateDownloadUrls
                                           }, QueryLabelsOperationCompleted, userState);
        }

        void OnQueryLabelsOperationCompleted(object arg)
        {
            if ((QueryLabelsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryLabelsCompleted(this, new QueryLabelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryMergeCandidates", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                         "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                  "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public MergeCandidate[] QueryMergeCandidates(string workspaceName,
                                                     string workspaceOwner,
                                                     ItemSpec source,
                                                     ItemSpec target)
        {
            object[] results = Invoke("QueryMergeCandidates", new object[]
                                                                  {
                                                                      workspaceName,
                                                                      workspaceOwner,
                                                                      source,
                                                                      target
                                                                  });
            return ((MergeCandidate[])(results[0]));
        }

        /// <remarks/>
        public void QueryMergeCandidatesAsync(string workspaceName,
                                              string workspaceOwner,
                                              ItemSpec source,
                                              ItemSpec target)
        {
            QueryMergeCandidatesAsync(workspaceName, workspaceOwner, source, target, null);
        }

        /// <remarks/>
        public void QueryMergeCandidatesAsync(string workspaceName,
                                              string workspaceOwner,
                                              ItemSpec source,
                                              ItemSpec target,
                                              object userState)
        {
            if ((QueryMergeCandidatesOperationCompleted == null))
            {
                QueryMergeCandidatesOperationCompleted = new SendOrPostCallback(OnQueryMergeCandidatesOperationCompleted);
            }
            InvokeAsync("QueryMergeCandidates", new object[]
                                                    {
                                                        workspaceName,
                                                        workspaceOwner,
                                                        source,
                                                        target
                                                    }, QueryMergeCandidatesOperationCompleted, userState);
        }

        void OnQueryMergeCandidatesOperationCompleted(object arg)
        {
            if ((QueryMergeCandidatesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryMergeCandidatesCompleted(this, new QueryMergeCandidatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryMerges", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                         "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public ChangesetMerge[] QueryMerges(string workspaceName,
                                            string workspaceOwner,
                                            ItemSpec source,
                                            VersionSpec versionSource,
                                            ItemSpec target,
                                            VersionSpec versionTarget,
                                            VersionSpec versionFrom,
                                            VersionSpec versionTo,
                                            int maxChangesets,
                                            out Changeset[] changesets)
        {
            object[] results = Invoke("QueryMerges", new object[]
                                                         {
                                                             workspaceName,
                                                             workspaceOwner,
                                                             source,
                                                             versionSource,
                                                             target,
                                                             versionTarget,
                                                             versionFrom,
                                                             versionTo,
                                                             maxChangesets
                                                         });
            changesets = ((Changeset[])(results[1]));
            return ((ChangesetMerge[])(results[0]));
        }

        /// <remarks/>
        public void QueryMergesAsync(string workspaceName,
                                     string workspaceOwner,
                                     ItemSpec source,
                                     VersionSpec versionSource,
                                     ItemSpec target,
                                     VersionSpec versionTarget,
                                     VersionSpec versionFrom,
                                     VersionSpec versionTo,
                                     int maxChangesets)
        {
            QueryMergesAsync(workspaceName, workspaceOwner, source, versionSource, target, versionTarget, versionFrom, versionTo, maxChangesets, null);
        }

        /// <remarks/>
        public void QueryMergesAsync(string workspaceName,
                                     string workspaceOwner,
                                     ItemSpec source,
                                     VersionSpec versionSource,
                                     ItemSpec target,
                                     VersionSpec versionTarget,
                                     VersionSpec versionFrom,
                                     VersionSpec versionTo,
                                     int maxChangesets,
                                     object userState)
        {
            if ((QueryMergesOperationCompleted == null))
            {
                QueryMergesOperationCompleted = new SendOrPostCallback(OnQueryMergesOperationCompleted);
            }
            InvokeAsync("QueryMerges", new object[]
                                           {
                                               workspaceName,
                                               workspaceOwner,
                                               source,
                                               versionSource,
                                               target,
                                               versionTarget,
                                               versionFrom,
                                               versionTo,
                                               maxChangesets
                                           }, QueryMergesOperationCompleted, userState);
        }

        void OnQueryMergesOperationCompleted(object arg)
        {
            if ((QueryMergesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryMergesCompleted(this, new QueryMergesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryPendingSets", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                     "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                              "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public PendingSet[] QueryPendingSets(string localWorkspaceName,
                                             string localWorkspaceOwner,
                                             string queryWorkspaceName,
                                             string ownerName,
                                             ItemSpec[] itemSpecs,
                                             bool generateDownloadUrls,
                                             out Failure[] failures)
        {
            object[] results = Invoke("QueryPendingSets", new object[]
                                                              {
                                                                  localWorkspaceName,
                                                                  localWorkspaceOwner,
                                                                  queryWorkspaceName,
                                                                  ownerName,
                                                                  itemSpecs,
                                                                  generateDownloadUrls
                                                              });
            failures = ((Failure[])(results[1]));
            return ((PendingSet[])(results[0]));
        }

        /// <remarks/>
        public void QueryPendingSetsAsync(string localWorkspaceName,
                                          string localWorkspaceOwner,
                                          string queryWorkspaceName,
                                          string ownerName,
                                          ItemSpec[] itemSpecs,
                                          bool generateDownloadUrls)
        {
            QueryPendingSetsAsync(localWorkspaceName, localWorkspaceOwner, queryWorkspaceName, ownerName, itemSpecs, generateDownloadUrls, null);
        }

        /// <remarks/>
        public void QueryPendingSetsAsync(string localWorkspaceName,
                                          string localWorkspaceOwner,
                                          string queryWorkspaceName,
                                          string ownerName,
                                          ItemSpec[] itemSpecs,
                                          bool generateDownloadUrls,
                                          object userState)
        {
            if ((QueryPendingSetsOperationCompleted == null))
            {
                QueryPendingSetsOperationCompleted = new SendOrPostCallback(OnQueryPendingSetsOperationCompleted);
            }
            InvokeAsync("QueryPendingSets", new object[]
                                                {
                                                    localWorkspaceName,
                                                    localWorkspaceOwner,
                                                    queryWorkspaceName,
                                                    ownerName,
                                                    itemSpecs,
                                                    generateDownloadUrls
                                                }, QueryPendingSetsOperationCompleted, userState);
        }

        void OnQueryPendingSetsOperationCompleted(object arg)
        {
            if ((QueryPendingSetsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryPendingSetsCompleted(this, new QueryPendingSetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryShelvedChanges", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                        "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                 "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public PendingSet[] QueryShelvedChanges(string localWorkspaceName,
                                                string localWorkspaceOwner,
                                                string shelvesetName,
                                                string ownerName,
                                                ItemSpec[] itemSpecs,
                                                bool generateDownloadUrls,
                                                out Failure[] failures)
        {
            object[] results = Invoke("QueryShelvedChanges", new object[]
                                                                 {
                                                                     localWorkspaceName,
                                                                     localWorkspaceOwner,
                                                                     shelvesetName,
                                                                     ownerName,
                                                                     itemSpecs,
                                                                     generateDownloadUrls
                                                                 });
            failures = ((Failure[])(results[1]));
            return ((PendingSet[])(results[0]));
        }

        /// <remarks/>
        public void QueryShelvedChangesAsync(string localWorkspaceName,
                                             string localWorkspaceOwner,
                                             string shelvesetName,
                                             string ownerName,
                                             ItemSpec[] itemSpecs,
                                             bool generateDownloadUrls)
        {
            QueryShelvedChangesAsync(localWorkspaceName, localWorkspaceOwner, shelvesetName, ownerName, itemSpecs, generateDownloadUrls, null);
        }

        /// <remarks/>
        public void QueryShelvedChangesAsync(string localWorkspaceName,
                                             string localWorkspaceOwner,
                                             string shelvesetName,
                                             string ownerName,
                                             ItemSpec[] itemSpecs,
                                             bool generateDownloadUrls,
                                             object userState)
        {
            if ((QueryShelvedChangesOperationCompleted == null))
            {
                QueryShelvedChangesOperationCompleted = new SendOrPostCallback(OnQueryShelvedChangesOperationCompleted);
            }
            InvokeAsync("QueryShelvedChanges", new object[]
                                                   {
                                                       localWorkspaceName,
                                                       localWorkspaceOwner,
                                                       shelvesetName,
                                                       ownerName,
                                                       itemSpecs,
                                                       generateDownloadUrls
                                                   }, QueryShelvedChangesOperationCompleted, userState);
        }

        void OnQueryShelvedChangesOperationCompleted(object arg)
        {
            if ((QueryShelvedChangesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryShelvedChangesCompleted(this, new QueryShelvedChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryShelvesets", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                    "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                             "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public Shelveset[] QueryShelvesets(string shelvesetName,
                                           string ownerName)
        {
            object[] results = Invoke("QueryShelvesets", new object[]
                                                             {
                                                                 shelvesetName,
                                                                 ownerName
                                                             });
            return ((Shelveset[])(results[0]));
        }

        /// <remarks/>
        public void QueryShelvesetsAsync(string shelvesetName,
                                         string ownerName)
        {
            QueryShelvesetsAsync(shelvesetName, ownerName, null);
        }

        /// <remarks/>
        public void QueryShelvesetsAsync(string shelvesetName,
                                         string ownerName,
                                         object userState)
        {
            if ((QueryShelvesetsOperationCompleted == null))
            {
                QueryShelvesetsOperationCompleted = new SendOrPostCallback(OnQueryShelvesetsOperationCompleted);
            }
            InvokeAsync("QueryShelvesets", new object[]
                                               {
                                                   shelvesetName,
                                                   ownerName
                                               }, QueryShelvesetsOperationCompleted, userState);
        }

        void OnQueryShelvesetsOperationCompleted(object arg)
        {
            if ((QueryShelvesetsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryShelvesetsCompleted(this, new QueryShelvesetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryWorkspace", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                   "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                            "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public Workspace QueryWorkspace(string workspaceName,
                                        string ownerName)
        {
            object[] results = Invoke("QueryWorkspace", new object[]
                                                            {
                                                                workspaceName,
                                                                ownerName
                                                            });
            return ((Workspace)(results[0]));
        }

        /// <remarks/>
        public void QueryWorkspaceAsync(string workspaceName,
                                        string ownerName)
        {
            QueryWorkspaceAsync(workspaceName, ownerName, null);
        }

        /// <remarks/>
        public void QueryWorkspaceAsync(string workspaceName,
                                        string ownerName,
                                        object userState)
        {
            if ((QueryWorkspaceOperationCompleted == null))
            {
                QueryWorkspaceOperationCompleted = new SendOrPostCallback(OnQueryWorkspaceOperationCompleted);
            }
            InvokeAsync("QueryWorkspace", new object[]
                                              {
                                                  workspaceName,
                                                  ownerName
                                              }, QueryWorkspaceOperationCompleted, userState);
        }

        void OnQueryWorkspaceOperationCompleted(object arg)
        {
            if ((QueryWorkspaceCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryWorkspaceCompleted(this, new QueryWorkspaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryWorkspaces", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                    "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                             "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public Workspace[] QueryWorkspaces(string ownerName,
                                           string computer)
        {
            object[] results = Invoke("QueryWorkspaces", new object[]
                                                             {
                                                                 ownerName,
                                                                 computer
                                                             });
            return ((Workspace[])(results[0]));
        }

        /// <remarks/>
        public void QueryWorkspacesAsync(string ownerName,
                                         string computer)
        {
            QueryWorkspacesAsync(ownerName, computer, null);
        }

        /// <remarks/>
        public void QueryWorkspacesAsync(string ownerName,
                                         string computer,
                                         object userState)
        {
            if ((QueryWorkspacesOperationCompleted == null))
            {
                QueryWorkspacesOperationCompleted = new SendOrPostCallback(OnQueryWorkspacesOperationCompleted);
            }
            InvokeAsync("QueryWorkspaces", new object[]
                                               {
                                                   ownerName,
                                                   computer
                                               }, QueryWorkspacesOperationCompleted, userState);
        }

        void OnQueryWorkspacesOperationCompleted(object arg)
        {
            if ((QueryWorkspacesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryWorkspacesCompleted(this, new QueryWorkspacesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/RefreshIdentityDisplayName", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                               "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                        "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public void RefreshIdentityDisplayName()
        {
            Invoke("RefreshIdentityDisplayName", new object[0]);
        }

        /// <remarks/>
        public void RefreshIdentityDisplayNameAsync()
        {
            RefreshIdentityDisplayNameAsync(null);
        }

        /// <remarks/>
        public void RefreshIdentityDisplayNameAsync(object userState)
        {
            if ((RefreshIdentityDisplayNameOperationCompleted == null))
            {
                RefreshIdentityDisplayNameOperationCompleted = new SendOrPostCallback(OnRefreshIdentityDisplayNameOperationCompleted);
            }
            InvokeAsync("RefreshIdentityDisplayName", new object[0], RefreshIdentityDisplayNameOperationCompleted, userState);
        }

        void OnRefreshIdentityDisplayNameOperationCompleted(object arg)
        {
            if ((RefreshIdentityDisplayNameCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                RefreshIdentityDisplayNameCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/RemoveLocalConflict", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                        "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                 "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public void RemoveLocalConflict(string workspaceName,
                                        string ownerName,
                                        int conflictId)
        {
            Invoke("RemoveLocalConflict", new object[]
                                              {
                                                  workspaceName,
                                                  ownerName,
                                                  conflictId
                                              });
        }

        /// <remarks/>
        public void RemoveLocalConflictAsync(string workspaceName,
                                             string ownerName,
                                             int conflictId)
        {
            RemoveLocalConflictAsync(workspaceName, ownerName, conflictId, null);
        }

        /// <remarks/>
        public void RemoveLocalConflictAsync(string workspaceName,
                                             string ownerName,
                                             int conflictId,
                                             object userState)
        {
            if ((RemoveLocalConflictOperationCompleted == null))
            {
                RemoveLocalConflictOperationCompleted = new SendOrPostCallback(OnRemoveLocalConflictOperationCompleted);
            }
            InvokeAsync("RemoveLocalConflict", new object[]
                                                   {
                                                       workspaceName,
                                                       ownerName,
                                                       conflictId
                                                   }, RemoveLocalConflictOperationCompleted, userState);
        }

        void OnRemoveLocalConflictOperationCompleted(object arg)
        {
            if ((RemoveLocalConflictCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                RemoveLocalConflictCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/Resolve", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                            "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                     "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public GetOperation[] Resolve(string workspaceName,
                                      string ownerName,
                                      int conflictId,
                                      Resolution resolution,
                                      string newPath,
                                      int encoding,
                                      LockLevel lockLevel,
                                      out GetOperation[] undoOperations,
                                      out Conflict[] resolvedConflicts)
        {
            object[] results = Invoke("Resolve", new object[]
                                                     {
                                                         workspaceName,
                                                         ownerName,
                                                         conflictId,
                                                         resolution,
                                                         newPath,
                                                         encoding,
                                                         lockLevel
                                                     });
            undoOperations = ((GetOperation[])(results[1]));
            resolvedConflicts = ((Conflict[])(results[2]));
            return ((GetOperation[])(results[0]));
        }

        /// <remarks/>
        public void ResolveAsync(string workspaceName,
                                 string ownerName,
                                 int conflictId,
                                 Resolution resolution,
                                 string newPath,
                                 int encoding,
                                 LockLevel lockLevel)
        {
            ResolveAsync(workspaceName, ownerName, conflictId, resolution, newPath, encoding, lockLevel, null);
        }

        /// <remarks/>
        public void ResolveAsync(string workspaceName,
                                 string ownerName,
                                 int conflictId,
                                 Resolution resolution,
                                 string newPath,
                                 int encoding,
                                 LockLevel lockLevel,
                                 object userState)
        {
            if ((ResolveOperationCompleted == null))
            {
                ResolveOperationCompleted = new SendOrPostCallback(OnResolveOperationCompleted);
            }
            InvokeAsync("Resolve", new object[]
                                       {
                                           workspaceName,
                                           ownerName,
                                           conflictId,
                                           resolution,
                                           newPath,
                                           encoding,
                                           lockLevel
                                       }, ResolveOperationCompleted, userState);
        }

        void OnResolveOperationCompleted(object arg)
        {
            if ((ResolveCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                ResolveCompleted(this, new ResolveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/SetFileTypes", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                 "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                          "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public void SetFileTypes(FileType[] fileTypes)
        {
            Invoke("SetFileTypes", new object[]
                                       {
                                           fileTypes
                                       });
        }

        /// <remarks/>
        public void SetFileTypesAsync(FileType[] fileTypes)
        {
            SetFileTypesAsync(fileTypes, null);
        }

        /// <remarks/>
        public void SetFileTypesAsync(FileType[] fileTypes,
                                      object userState)
        {
            if ((SetFileTypesOperationCompleted == null))
            {
                SetFileTypesOperationCompleted = new SendOrPostCallback(OnSetFileTypesOperationCompleted);
            }
            InvokeAsync("SetFileTypes", new object[]
                                            {
                                                fileTypes
                                            }, SetFileTypesOperationCompleted, userState);
        }

        void OnSetFileTypesOperationCompleted(object arg)
        {
            if ((SetFileTypesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                SetFileTypesCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/Shelve", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                           "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                    "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public Failure[] Shelve(string workspaceName,
                                string workspaceOwner,
                                string[] serverItems,
                                Shelveset shelveset,
                                bool replace)
        {
            object[] results = Invoke("Shelve", new object[]
                                                    {
                                                        workspaceName,
                                                        workspaceOwner,
                                                        serverItems,
                                                        shelveset,
                                                        replace
                                                    });
            return ((Failure[])(results[0]));
        }

        /// <remarks/>
        public void ShelveAsync(string workspaceName,
                                string workspaceOwner,
                                string[] serverItems,
                                Shelveset shelveset,
                                bool replace)
        {
            ShelveAsync(workspaceName, workspaceOwner, serverItems, shelveset, replace, null);
        }

        /// <remarks/>
        public void ShelveAsync(string workspaceName,
                                string workspaceOwner,
                                string[] serverItems,
                                Shelveset shelveset,
                                bool replace,
                                object userState)
        {
            if ((ShelveOperationCompleted == null))
            {
                ShelveOperationCompleted = new SendOrPostCallback(OnShelveOperationCompleted);
            }
            InvokeAsync("Shelve", new object[]
                                      {
                                          workspaceName,
                                          workspaceOwner,
                                          serverItems,
                                          shelveset,
                                          replace
                                      }, ShelveOperationCompleted, userState);
        }

        void OnShelveOperationCompleted(object arg)
        {
            if ((ShelveCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                ShelveCompleted(this, new ShelveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/UndoPendingChanges", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                       "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public GetOperation[] UndoPendingChanges(string workspaceName,
                                                 string ownerName,
                                                 ItemSpec[] items,
                                                 out Failure[] failures)
        {
            object[] results = Invoke("UndoPendingChanges", new object[]
                                                                {
                                                                    workspaceName,
                                                                    ownerName,
                                                                    items
                                                                });
            failures = ((Failure[])(results[1]));
            return ((GetOperation[])(results[0]));
        }

        /// <remarks/>
        public void UndoPendingChangesAsync(string workspaceName,
                                            string ownerName,
                                            ItemSpec[] items)
        {
            UndoPendingChangesAsync(workspaceName, ownerName, items, null);
        }

        /// <remarks/>
        public void UndoPendingChangesAsync(string workspaceName,
                                            string ownerName,
                                            ItemSpec[] items,
                                            object userState)
        {
            if ((UndoPendingChangesOperationCompleted == null))
            {
                UndoPendingChangesOperationCompleted = new SendOrPostCallback(OnUndoPendingChangesOperationCompleted);
            }
            InvokeAsync("UndoPendingChanges", new object[]
                                                  {
                                                      workspaceName,
                                                      ownerName,
                                                      items
                                                  }, UndoPendingChangesOperationCompleted, userState);
        }

        void OnUndoPendingChangesOperationCompleted(object arg)
        {
            if ((UndoPendingChangesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UndoPendingChangesCompleted(this, new UndoPendingChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/UnlabelItem", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                         "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public LabelResult[] UnlabelItem(string workspaceName,
                                         string workspaceOwner,
                                         string labelName,
                                         string labelScope,
                                         ItemSpec[] items,
                                         VersionSpec version,
                                         out Failure[] failures)
        {
            object[] results = Invoke("UnlabelItem", new object[]
                                                         {
                                                             workspaceName,
                                                             workspaceOwner,
                                                             labelName,
                                                             labelScope,
                                                             items,
                                                             version
                                                         });
            failures = ((Failure[])(results[1]));
            return ((LabelResult[])(results[0]));
        }

        /// <remarks/>
        public void UnlabelItemAsync(string workspaceName,
                                     string workspaceOwner,
                                     string labelName,
                                     string labelScope,
                                     ItemSpec[] items,
                                     VersionSpec version)
        {
            UnlabelItemAsync(workspaceName, workspaceOwner, labelName, labelScope, items, version, null);
        }

        /// <remarks/>
        public void UnlabelItemAsync(string workspaceName,
                                     string workspaceOwner,
                                     string labelName,
                                     string labelScope,
                                     ItemSpec[] items,
                                     VersionSpec version,
                                     object userState)
        {
            if ((UnlabelItemOperationCompleted == null))
            {
                UnlabelItemOperationCompleted = new SendOrPostCallback(OnUnlabelItemOperationCompleted);
            }
            InvokeAsync("UnlabelItem", new object[]
                                           {
                                               workspaceName,
                                               workspaceOwner,
                                               labelName,
                                               labelScope,
                                               items,
                                               version
                                           }, UnlabelItemOperationCompleted, userState);
        }

        void OnUnlabelItemOperationCompleted(object arg)
        {
            if ((UnlabelItemCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UnlabelItemCompleted(this, new UnlabelItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/Unshelve", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                             "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                      "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public Shelveset Unshelve(string shelvesetName,
                                  string shelvesetOwner,
                                  string workspaceName,
                                  string workspaceOwner,
                                  ItemSpec[] items,
                                  out Failure[] failures,
                                  out GetOperation[] getOperations)
        {
            object[] results = Invoke("Unshelve", new object[]
                                                      {
                                                          shelvesetName,
                                                          shelvesetOwner,
                                                          workspaceName,
                                                          workspaceOwner,
                                                          items
                                                      });
            failures = ((Failure[])(results[1]));
            getOperations = ((GetOperation[])(results[2]));
            return ((Shelveset)(results[0]));
        }

        /// <remarks/>
        public void UnshelveAsync(string shelvesetName,
                                  string shelvesetOwner,
                                  string workspaceName,
                                  string workspaceOwner,
                                  ItemSpec[] items)
        {
            UnshelveAsync(shelvesetName, shelvesetOwner, workspaceName, workspaceOwner, items, null);
        }

        /// <remarks/>
        public void UnshelveAsync(string shelvesetName,
                                  string shelvesetOwner,
                                  string workspaceName,
                                  string workspaceOwner,
                                  ItemSpec[] items,
                                  object userState)
        {
            if ((UnshelveOperationCompleted == null))
            {
                UnshelveOperationCompleted = new SendOrPostCallback(OnUnshelveOperationCompleted);
            }
            InvokeAsync("Unshelve", new object[]
                                        {
                                            shelvesetName,
                                            shelvesetOwner,
                                            workspaceName,
                                            workspaceOwner,
                                            items
                                        }, UnshelveOperationCompleted, userState);
        }

        void OnUnshelveOperationCompleted(object arg)
        {
            if ((UnshelveCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UnshelveCompleted(this, new UnshelveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/UpdateChangeset", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                    "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                             "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public void UpdateChangeset(int changeset,
                                    string comment,
                                    CheckinNote checkinNote)
        {
            Invoke("UpdateChangeset", new object[]
                                          {
                                              changeset,
                                              comment,
                                              checkinNote
                                          });
        }

        /// <remarks/>
        public void UpdateChangesetAsync(int changeset,
                                         string comment,
                                         CheckinNote checkinNote)
        {
            UpdateChangesetAsync(changeset, comment, checkinNote, null);
        }

        /// <remarks/>
        public void UpdateChangesetAsync(int changeset,
                                         string comment,
                                         CheckinNote checkinNote,
                                         object userState)
        {
            if ((UpdateChangesetOperationCompleted == null))
            {
                UpdateChangesetOperationCompleted = new SendOrPostCallback(OnUpdateChangesetOperationCompleted);
            }
            InvokeAsync("UpdateChangeset", new object[]
                                               {
                                                   changeset,
                                                   comment,
                                                   checkinNote
                                               }, UpdateChangesetOperationCompleted, userState);
        }

        void OnUpdateChangesetOperationCompleted(object arg)
        {
            if ((UpdateChangesetCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UpdateChangesetCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/UpdateCheckinNoteFieldName", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                               "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                        "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public void UpdateCheckinNoteFieldName(string path,
                                               string existingFieldName,
                                               string newFieldName)
        {
            Invoke("UpdateCheckinNoteFieldName", new object[]
                                                     {
                                                         path,
                                                         existingFieldName,
                                                         newFieldName
                                                     });
        }

        /// <remarks/>
        public void UpdateCheckinNoteFieldNameAsync(string path,
                                                    string existingFieldName,
                                                    string newFieldName)
        {
            UpdateCheckinNoteFieldNameAsync(path, existingFieldName, newFieldName, null);
        }

        /// <remarks/>
        public void UpdateCheckinNoteFieldNameAsync(string path,
                                                    string existingFieldName,
                                                    string newFieldName,
                                                    object userState)
        {
            if ((UpdateCheckinNoteFieldNameOperationCompleted == null))
            {
                UpdateCheckinNoteFieldNameOperationCompleted = new SendOrPostCallback(OnUpdateCheckinNoteFieldNameOperationCompleted);
            }
            InvokeAsync("UpdateCheckinNoteFieldName", new object[]
                                                          {
                                                              path,
                                                              existingFieldName,
                                                              newFieldName
                                                          }, UpdateCheckinNoteFieldNameOperationCompleted, userState);
        }

        void OnUpdateCheckinNoteFieldNameOperationCompleted(object arg)
        {
            if ((UpdateCheckinNoteFieldNameCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UpdateCheckinNoteFieldNameCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/UpdateGlobalSecurity", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                         "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                  "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public PermissionChange[] UpdateGlobalSecurity(PermissionChange[] changes,
                                                       out Failure[] failures)
        {
            object[] results = Invoke("UpdateGlobalSecurity", new object[]
                                                                  {
                                                                      changes
                                                                  });
            failures = ((Failure[])(results[1]));
            return ((PermissionChange[])(results[0]));
        }

        /// <remarks/>
        public void UpdateGlobalSecurityAsync(PermissionChange[] changes)
        {
            UpdateGlobalSecurityAsync(changes, null);
        }

        /// <remarks/>
        public void UpdateGlobalSecurityAsync(PermissionChange[] changes,
                                              object userState)
        {
            if ((UpdateGlobalSecurityOperationCompleted == null))
            {
                UpdateGlobalSecurityOperationCompleted = new SendOrPostCallback(OnUpdateGlobalSecurityOperationCompleted);
            }
            InvokeAsync("UpdateGlobalSecurity", new object[]
                                                    {
                                                        changes
                                                    }, UpdateGlobalSecurityOperationCompleted, userState);
        }

        void OnUpdateGlobalSecurityOperationCompleted(object arg)
        {
            if ((UpdateGlobalSecurityCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UpdateGlobalSecurityCompleted(this, new UpdateGlobalSecurityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/UpdateItemSecurity", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                       "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public SecurityChange[] UpdateItemSecurity(string workspaceName,
                                                   string workspaceOwner,
                                                   SecurityChange[] changes,
                                                   out Failure[] failures)
        {
            object[] results = Invoke("UpdateItemSecurity", new object[]
                                                                {
                                                                    workspaceName,
                                                                    workspaceOwner,
                                                                    changes
                                                                });
            failures = ((Failure[])(results[1]));
            return ((SecurityChange[])(results[0]));
        }

        /// <remarks/>
        public void UpdateItemSecurityAsync(string workspaceName,
                                            string workspaceOwner,
                                            SecurityChange[] changes)
        {
            UpdateItemSecurityAsync(workspaceName, workspaceOwner, changes, null);
        }

        /// <remarks/>
        public void UpdateItemSecurityAsync(string workspaceName,
                                            string workspaceOwner,
                                            SecurityChange[] changes,
                                            object userState)
        {
            if ((UpdateItemSecurityOperationCompleted == null))
            {
                UpdateItemSecurityOperationCompleted = new SendOrPostCallback(OnUpdateItemSecurityOperationCompleted);
            }
            InvokeAsync("UpdateItemSecurity", new object[]
                                                  {
                                                      workspaceName,
                                                      workspaceOwner,
                                                      changes
                                                  }, UpdateItemSecurityOperationCompleted, userState);
        }

        void OnUpdateItemSecurityOperationCompleted(object arg)
        {
            if ((UpdateItemSecurityCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UpdateItemSecurityCompleted(this, new UpdateItemSecurityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/UpdateLocalVersion", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                       "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public void UpdateLocalVersion(string workspaceName,
                                       string ownerName,
                                       LocalVersionUpdate[] updates)
        {
            Invoke("UpdateLocalVersion", new object[]
                                             {
                                                 workspaceName,
                                                 ownerName,
                                                 updates
                                             });
        }

        /// <remarks/>
        public void UpdateLocalVersionAsync(string workspaceName,
                                            string ownerName,
                                            LocalVersionUpdate[] updates)
        {
            UpdateLocalVersionAsync(workspaceName, ownerName, updates, null);
        }

        /// <remarks/>
        public void UpdateLocalVersionAsync(string workspaceName,
                                            string ownerName,
                                            LocalVersionUpdate[] updates,
                                            object userState)
        {
            if ((UpdateLocalVersionOperationCompleted == null))
            {
                UpdateLocalVersionOperationCompleted = new SendOrPostCallback(OnUpdateLocalVersionOperationCompleted);
            }
            InvokeAsync("UpdateLocalVersion", new object[]
                                                  {
                                                      workspaceName,
                                                      ownerName,
                                                      updates
                                                  }, UpdateLocalVersionOperationCompleted, userState);
        }

        void OnUpdateLocalVersionOperationCompleted(object arg)
        {
            if ((UpdateLocalVersionCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UpdateLocalVersionCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/UpdatePendingState", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                       "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public void UpdatePendingState(string workspaceName,
                                       string workspaceOwner,
                                       PendingState[] updates)
        {
            Invoke("UpdatePendingState", new object[]
                                             {
                                                 workspaceName,
                                                 workspaceOwner,
                                                 updates
                                             });
        }

        /// <remarks/>
        public void UpdatePendingStateAsync(string workspaceName,
                                            string workspaceOwner,
                                            PendingState[] updates)
        {
            UpdatePendingStateAsync(workspaceName, workspaceOwner, updates, null);
        }

        /// <remarks/>
        public void UpdatePendingStateAsync(string workspaceName,
                                            string workspaceOwner,
                                            PendingState[] updates,
                                            object userState)
        {
            if ((UpdatePendingStateOperationCompleted == null))
            {
                UpdatePendingStateOperationCompleted = new SendOrPostCallback(OnUpdatePendingStateOperationCompleted);
            }
            InvokeAsync("UpdatePendingState", new object[]
                                                  {
                                                      workspaceName,
                                                      workspaceOwner,
                                                      updates
                                                  }, UpdatePendingStateOperationCompleted, userState);
        }

        void OnUpdatePendingStateOperationCompleted(object arg)
        {
            if ((UpdatePendingStateCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UpdatePendingStateCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/UpdateWorkspace", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                    "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                             "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public Workspace UpdateWorkspace(string oldWorkspaceName,
                                         string ownerName,
                                         Workspace newWorkspace)
        {
            object[] results = Invoke("UpdateWorkspace", new object[]
                                                             {
                                                                 oldWorkspaceName,
                                                                 ownerName,
                                                                 newWorkspace
                                                             });
            return ((Workspace)(results[0]));
        }

        /// <remarks/>
        public void UpdateWorkspaceAsync(string oldWorkspaceName,
                                         string ownerName,
                                         Workspace newWorkspace)
        {
            UpdateWorkspaceAsync(oldWorkspaceName, ownerName, newWorkspace, null);
        }

        /// <remarks/>
        public void UpdateWorkspaceAsync(string oldWorkspaceName,
                                         string ownerName,
                                         Workspace newWorkspace,
                                         object userState)
        {
            if ((UpdateWorkspaceOperationCompleted == null))
            {
                UpdateWorkspaceOperationCompleted = new SendOrPostCallback(OnUpdateWorkspaceOperationCompleted);
            }
            InvokeAsync("UpdateWorkspace", new object[]
                                               {
                                                   oldWorkspaceName,
                                                   ownerName,
                                                   newWorkspace
                                               }, UpdateWorkspaceOperationCompleted, userState);
        }

        void OnUpdateWorkspaceOperationCompleted(object arg)
        {
            if ((UpdateWorkspaceCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UpdateWorkspaceCompleted(this, new UpdateWorkspaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryPendingChangesById", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                            "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                     "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public PendingChange[] QueryPendingChangesById(int[] pendingChangeIds,
                                                       bool generateDownloadUrls)
        {
            object[] results = Invoke("QueryPendingChangesById", new object[]
                                                                     {
                                                                         pendingChangeIds,
                                                                         generateDownloadUrls
                                                                     });
            return ((PendingChange[])(results[0]));
        }

        /// <remarks/>
        public void QueryPendingChangesByIdAsync(int[] pendingChangeIds,
                                                 bool generateDownloadUrls)
        {
            QueryPendingChangesByIdAsync(pendingChangeIds, generateDownloadUrls, null);
        }

        /// <remarks/>
        public void QueryPendingChangesByIdAsync(int[] pendingChangeIds,
                                                 bool generateDownloadUrls,
                                                 object userState)
        {
            if ((QueryPendingChangesByIdOperationCompleted == null))
            {
                QueryPendingChangesByIdOperationCompleted = new SendOrPostCallback(OnQueryPendingChangesByIdOperationCompleted);
            }
            InvokeAsync("QueryPendingChangesById", new object[]
                                                       {
                                                           pendingChangeIds,
                                                           generateDownloadUrls
                                                       }, QueryPendingChangesByIdOperationCompleted, userState);
        }

        void OnQueryPendingChangesByIdOperationCompleted(object arg)
        {
            if ((QueryPendingChangesByIdCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryPendingChangesByIdCompleted(this, new QueryPendingChangesByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/QueryItemsById", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                   "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                            "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public Item[] QueryItemsById(int[] itemIds,
                                     int changeSet,
                                     bool generateDownloadUrls)
        {
            object[] results = Invoke("QueryItemsById", new object[]
                                                            {
                                                                itemIds,
                                                                changeSet,
                                                                generateDownloadUrls
                                                            });
            return ((Item[])(results[0]));
        }

        /// <remarks/>
        public void QueryItemsByIdAsync(int[] itemIds,
                                        int changeSet,
                                        bool generateDownloadUrls)
        {
            QueryItemsByIdAsync(itemIds, changeSet, generateDownloadUrls, null);
        }

        /// <remarks/>
        public void QueryItemsByIdAsync(int[] itemIds,
                                        int changeSet,
                                        bool generateDownloadUrls,
                                        object userState)
        {
            if ((QueryItemsByIdOperationCompleted == null))
            {
                QueryItemsByIdOperationCompleted = new SendOrPostCallback(OnQueryItemsByIdOperationCompleted);
            }
            InvokeAsync("QueryItemsById", new object[]
                                              {
                                                  itemIds,
                                                  changeSet,
                                                  generateDownloadUrls
                                              }, QueryItemsByIdOperationCompleted, userState);
        }

        void OnQueryItemsByIdOperationCompleted(object arg)
        {
            if ((QueryItemsByIdCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                QueryItemsByIdCompleted(this, new QueryItemsByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                            "/03/CreateTeamProjectFolder", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                            "/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                                                                                                     "/03", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
        public void CreateTeamProjectFolder(TeamProjectFolderOptions teamProjectOptions)
        {
            Invoke("CreateTeamProjectFolder", new object[]
                                                  {
                                                      teamProjectOptions
                                                  });
        }

        /// <remarks/>
        public void CreateTeamProjectFolderAsync(TeamProjectFolderOptions teamProjectOptions)
        {
            CreateTeamProjectFolderAsync(teamProjectOptions, null);
        }

        /// <remarks/>
        public void CreateTeamProjectFolderAsync(TeamProjectFolderOptions teamProjectOptions,
                                                 object userState)
        {
            if ((CreateTeamProjectFolderOperationCompleted == null))
            {
                CreateTeamProjectFolderOperationCompleted = new SendOrPostCallback(OnCreateTeamProjectFolderOperationCompleted);
            }
            InvokeAsync("CreateTeamProjectFolder", new object[]
                                                       {
                                                           teamProjectOptions
                                                       }, CreateTeamProjectFolderOperationCompleted, userState);
        }

        void OnCreateTeamProjectFolderOperationCompleted(object arg)
        {
            if ((CreateTeamProjectFolderCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                CreateTeamProjectFolderCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                 || (url == string.Empty)))
            {
                return false;
            }
            Uri wsUri = new Uri(url);
            if (((wsUri.Port >= 1024)
                 && (string.Compare(wsUri.Host, "localHost", StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum ConflictType
    {
        /// <remarks/>
        Get,

        /// <remarks/>
        Checkin,

        /// <remarks/>
        Local,

        /// <remarks/>
        Merge,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class Changeset
    {
        Change[] changesField;

        string commentField;

        CheckinNote checkinNoteField;

        PolicyOverrideInfo policyOverrideField;

        string cmtrField;

        DateTime dateField;

        int csetField;

        string ownerField;

        /// <remarks/>
        public Change[] Changes
        {
            get { return changesField; }
            set { changesField = value; }
        }

        /// <remarks/>
        public string Comment
        {
            get { return commentField; }
            set { commentField = value; }
        }

        /// <remarks/>
        public CheckinNote CheckinNote
        {
            get { return checkinNoteField; }
            set { checkinNoteField = value; }
        }

        /// <remarks/>
        public PolicyOverrideInfo PolicyOverride
        {
            get { return policyOverrideField; }
            set { policyOverrideField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string cmtr
        {
            get { return cmtrField; }
            set { cmtrField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public DateTime date
        {
            get { return dateField; }
            set { dateField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int cset
        {
            get { return csetField; }
            set { csetField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string owner
        {
            get { return ownerField; }
            set { ownerField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class Change
    {
        Item itemField;

        ChangeType typeField;

        /// <remarks/>
        public Item Item
        {
            get { return itemField; }
            set { itemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public ChangeType type
        {
            get { return typeField; }
            set { typeField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class Item
    {
        int csField;

        DateTime dateField;

        int didField;

        int encField;

        ItemType typeField;

        int itemidField;

        string itemField;

        string tzField;

        string tzoField;

        byte[] hashField;

        long lenField;

        string durlField;

        public Item()
        {
            csField = 0;
            didField = 0;
            encField = -2;
            typeField = ItemType.Any;
            itemidField = 0;
            lenField = ((long)(0));
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int cs
        {
            get { return csField; }
            set { csField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public DateTime date
        {
            get { return dateField; }
            set { dateField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int did
        {
            get { return didField; }
            set { didField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(-2)]
        public int enc
        {
            get { return encField; }
            set { encField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(ItemType.Any)]
        public ItemType type
        {
            get { return typeField; }
            set { typeField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int itemid
        {
            get { return itemidField; }
            set { itemidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string item
        {
            get { return itemField; }
            set { itemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string tz
        {
            get { return tzField; }
            set { tzField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string tzo
        {
            get { return tzoField; }
            set { tzoField = value; }
        }

        /// <remarks/>
        [XmlAttribute(DataType="base64Binary")]
        public byte[] hash
        {
            get { return hashField; }
            set { hashField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(typeof(long), "0")]
        public long len
        {
            get { return lenField; }
            set { lenField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string durl
        {
            get { return durlField; }
            set { durlField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum ItemType
    {
        /// <remarks/>
        Any,

        /// <remarks/>
        Folder,

        /// <remarks/>
        File,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class TeamProjectFolderPermission
    {
        string[] allowPermissionField;

        string[] denyPermissionField;

        string identField;

        /// <remarks/>
        public string[] AllowPermission
        {
            get { return allowPermissionField; }
            set { allowPermissionField = value; }
        }

        /// <remarks/>
        public string[] DenyPermission
        {
            get { return denyPermissionField; }
            set { denyPermissionField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string ident
        {
            get { return identField; }
            set { identField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class TeamProjectFolderOptions
    {
        string teamProjectField;

        string sourceProjectField;

        string commentField;

        TeamProjectFolderPermission[] permissionsField;

        CheckinNoteFieldDefinition[] checkinNoteDefinitionField;

        bool excField;

        public TeamProjectFolderOptions()
        {
            excField = false;
        }

        /// <remarks/>
        public string TeamProject
        {
            get { return teamProjectField; }
            set { teamProjectField = value; }
        }

        /// <remarks/>
        public string SourceProject
        {
            get { return sourceProjectField; }
            set { sourceProjectField = value; }
        }

        /// <remarks/>
        public string Comment
        {
            get { return commentField; }
            set { commentField = value; }
        }

        /// <remarks/>
        public TeamProjectFolderPermission[] Permissions
        {
            get { return permissionsField; }
            set { permissionsField = value; }
        }

        /// <remarks/>
        public CheckinNoteFieldDefinition[] CheckinNoteDefinition
        {
            get { return checkinNoteDefinitionField; }
            set { checkinNoteDefinitionField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(false)]
        public bool exc
        {
            get { return excField; }
            set { excField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class CheckinNoteFieldDefinition
    {
        string aiField;

        string nameField;

        bool reqField;

        int doField;

        public CheckinNoteFieldDefinition()
        {
            reqField = false;
            doField = 0;
        }

        /// <remarks/>
        [XmlAttribute()]
        public string ai
        {
            get { return aiField; }
            set { aiField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(false)]
        public bool req
        {
            get { return reqField; }
            set { reqField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int @do
        {
            get { return doField; }
            set { doField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class ConflictInformation
    {
        ConflictType ctField;

        int vfField;

        int pcidField;

        string slocalField;

        string tlocalField;

        int reField;

        /// <remarks/>
        [XmlAttribute()]
        public ConflictType ct
        {
            get { return ctField; }
            set { ctField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int vf
        {
            get { return vfField; }
            set { vfField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int pcid
        {
            get { return pcidField; }
            set { pcidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string slocal
        {
            get { return slocalField; }
            set { slocalField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string tlocal
        {
            get { return tlocalField; }
            set { tlocalField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int re
        {
            get { return reField; }
            set { reField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class PendingState
    {
        ConflictInformation conflictInfoField;

        int idField;

        int rtvField;

        public PendingState()
        {
            rtvField = 0;
        }

        /// <remarks/>
        public ConflictInformation ConflictInfo
        {
            get { return conflictInfoField; }
            set { conflictInfoField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int id
        {
            get { return idField; }
            set { idField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int rtv
        {
            get { return rtvField; }
            set { rtvField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class LocalVersionUpdate
    {
        int itemidField;

        string tlocalField;

        int lverField;

        public LocalVersionUpdate()
        {
            itemidField = 0;
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int itemid
        {
            get { return itemidField; }
            set { itemidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string tlocal
        {
            get { return tlocalField; }
            set { tlocalField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int lver
        {
            get { return lverField; }
            set { lverField = value; }
        }
    }

    /// <remarks/>
    [XmlInclude(typeof(InheritanceChange))]
    [XmlInclude(typeof(PermissionChange))]
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public abstract partial class SecurityChange
    {
        string itemField;

        /// <remarks/>
        [XmlAttribute()]
        public string item
        {
            get { return itemField; }
            set { itemField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class InheritanceChange : SecurityChange
    {
        bool inheritField;

        public InheritanceChange()
        {
            inheritField = true;
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(true)]
        public bool inherit
        {
            get { return inheritField; }
            set { inheritField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class PermissionChange : SecurityChange
    {
        string[] allowField;

        string[] denyField;

        string[] removeField;

        string identField;

        /// <remarks/>
        public string[] Allow
        {
            get { return allowField; }
            set { allowField = value; }
        }

        /// <remarks/>
        public string[] Deny
        {
            get { return denyField; }
            set { denyField = value; }
        }

        /// <remarks/>
        public string[] Remove
        {
            get { return removeField; }
            set { removeField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string ident
        {
            get { return identField; }
            set { identField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class VersionControlLink
    {
        int typeField;

        string urlField;

        /// <remarks/>
        [XmlAttribute()]
        public int type
        {
            get { return typeField; }
            set { typeField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string url
        {
            get { return urlField; }
            set { urlField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class Shelveset
    {
        string commentField;

        string policyOverrideCommentField;

        CheckinNote checkinNoteField;

        VersionControlLink[] linksField;

        DateTime dateField;

        string nameField;

        string ownerField;

        /// <remarks/>
        public string Comment
        {
            get { return commentField; }
            set { commentField = value; }
        }

        /// <remarks/>
        public string PolicyOverrideComment
        {
            get { return policyOverrideCommentField; }
            set { policyOverrideCommentField = value; }
        }

        /// <remarks/>
        public CheckinNote CheckinNote
        {
            get { return checkinNoteField; }
            set { checkinNoteField = value; }
        }

        /// <remarks/>
        public VersionControlLink[] Links
        {
            get { return linksField; }
            set { linksField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public DateTime date
        {
            get { return dateField; }
            set { dateField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string owner
        {
            get { return ownerField; }
            set { ownerField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class CheckinNote
    {
        CheckinNoteFieldValue[] valuesField;

        /// <remarks/>
        public CheckinNoteFieldValue[] Values
        {
            get { return valuesField; }
            set { valuesField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class CheckinNoteFieldValue
    {
        string nameField;

        string valField;

        /// <remarks/>
        [XmlAttribute()]
        public string name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string val
        {
            get { return valField; }
            set { valField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class PendingChange
    {
        ChangeType chgField;

        DateTime dateField;

        int didField;

        ItemType typeField;

        int encField;

        int itemidField;

        string localField;

        LockLevel lockField;

        string itemField;

        string srclocalField;

        string srcitemField;

        int verField;

        byte[] hashField;

        byte[] uhashField;

        int pcidField;

        string durlField;

        string shelvedurlField;

        public PendingChange()
        {
            chgField = ChangeType.None;
            didField = 0;
            typeField = ItemType.Any;
            encField = -2;
            itemidField = 0;
            lockField = LockLevel.None;
            verField = 0;
            pcidField = 0;
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(ChangeType.None)]
        public ChangeType chg
        {
            get { return chgField; }
            set { chgField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public DateTime date
        {
            get { return dateField; }
            set { dateField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int did
        {
            get { return didField; }
            set { didField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(ItemType.Any)]
        public ItemType type
        {
            get { return typeField; }
            set { typeField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(-2)]
        public int enc
        {
            get { return encField; }
            set { encField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int itemid
        {
            get { return itemidField; }
            set { itemidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string local
        {
            get { return localField; }
            set { localField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(LockLevel.None)]
        public LockLevel @lock
        {
            get { return lockField; }
            set { lockField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string item
        {
            get { return itemField; }
            set { itemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string srclocal
        {
            get { return srclocalField; }
            set { srclocalField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string srcitem
        {
            get { return srcitemField; }
            set { srcitemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int ver
        {
            get { return verField; }
            set { verField = value; }
        }

        /// <remarks/>
        [XmlAttribute(DataType="base64Binary")]
        public byte[] hash
        {
            get { return hashField; }
            set { hashField = value; }
        }

        /// <remarks/>
        [XmlAttribute(DataType="base64Binary")]
        public byte[] uhash
        {
            get { return uhashField; }
            set { uhashField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int pcid
        {
            get { return pcidField; }
            set { pcidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string durl
        {
            get { return durlField; }
            set { durlField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string shelvedurl
        {
            get { return shelvedurlField; }
            set { shelvedurlField = value; }
        }
    }

    /// <remarks/>
    [Flags()]
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum ChangeType
    {
        /// <remarks/>
        None = 1,

        /// <remarks/>
        Add = 2,

        /// <remarks/>
        Edit = 4,

        /// <remarks/>
        Encoding = 8,

        /// <remarks/>
        Rename = 16,

        /// <remarks/>
        Delete = 32,

        /// <remarks/>
        Undelete = 64,

        /// <remarks/>
        Branch = 128,

        /// <remarks/>
        Merge = 256,

        /// <remarks/>
        Lock = 512,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum LockLevel
    {
        /// <remarks/>
        None,

        /// <remarks/>
        Checkin,

        /// <remarks/>
        CheckOut,

        /// <remarks/>
        Unchanged,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class PendingSet
    {
        PendingChange[] pendingChangesField;

        string computerField;

        string ownerField;

        string nameField;

        PendingSetType typeField;

        /// <remarks/>
        public PendingChange[] PendingChanges
        {
            get { return pendingChangesField; }
            set { pendingChangesField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string computer
        {
            get { return computerField; }
            set { computerField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string owner
        {
            get { return ownerField; }
            set { ownerField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public PendingSetType type
        {
            get { return typeField; }
            set { typeField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum PendingSetType
    {
        /// <remarks/>
        Workspace,

        /// <remarks/>
        Shelveset,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class ChangesetMerge
    {
        int srcverField;

        int tgtverField;

        bool partField;

        public ChangesetMerge()
        {
            partField = false;
        }

        /// <remarks/>
        [XmlAttribute()]
        public int srcver
        {
            get { return srcverField; }
            set { srcverField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int tgtver
        {
            get { return tgtverField; }
            set { tgtverField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(false)]
        public bool part
        {
            get { return partField; }
            set { partField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class MergeCandidate
    {
        Changeset changesetField;

        bool partField;

        public MergeCandidate()
        {
            partField = false;
        }

        /// <remarks/>
        public Changeset Changeset
        {
            get { return changesetField; }
            set { changesetField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(false)]
        public bool part
        {
            get { return partField; }
            set { partField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class ItemSecurity
    {
        AccessEntry[] entriesField;

        bool inheritField;

        string itemField;

        bool modField;

        public ItemSecurity()
        {
            inheritField = true;
            modField = true;
        }

        /// <remarks/>
        public AccessEntry[] Entries
        {
            get { return entriesField; }
            set { entriesField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(true)]
        public bool inherit
        {
            get { return inheritField; }
            set { inheritField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string item
        {
            get { return itemField; }
            set { itemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(true)]
        public bool mod
        {
            get { return modField; }
            set { modField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class AccessEntry
    {
        string[] allowField;

        string[] denyField;

        string[] allowInheritedField;

        string[] denyInheritedField;

        string identField;

        /// <remarks/>
        public string[] Allow
        {
            get { return allowField; }
            set { allowField = value; }
        }

        /// <remarks/>
        public string[] Deny
        {
            get { return denyField; }
            set { denyField = value; }
        }

        /// <remarks/>
        public string[] AllowInherited
        {
            get { return allowInheritedField; }
            set { allowInheritedField = value; }
        }

        /// <remarks/>
        public string[] DenyInherited
        {
            get { return denyInheritedField; }
            set { denyInheritedField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string ident
        {
            get { return identField; }
            set { identField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class ExtendedItem
    {
        int lverField;

        int didField;

        int latestField;

        ItemType typeField;

        int encField;

        int itemidField;

        string localField;

        string titemField;

        string sitemField;

        ChangeType chgField;

        bool ochgField;

        LockLevel lockField;

        string lownerField;

        public ExtendedItem()
        {
            lverField = 0;
            didField = 0;
            latestField = 0;
            typeField = ItemType.Any;
            encField = -3;
            itemidField = 0;
            chgField = ChangeType.None;
            ochgField = false;
            lockField = LockLevel.None;
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int lver
        {
            get { return lverField; }
            set { lverField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int did
        {
            get { return didField; }
            set { didField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int latest
        {
            get { return latestField; }
            set { latestField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(ItemType.Any)]
        public ItemType type
        {
            get { return typeField; }
            set { typeField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(-3)]
        public int enc
        {
            get { return encField; }
            set { encField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int itemid
        {
            get { return itemidField; }
            set { itemidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string local
        {
            get { return localField; }
            set { localField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string titem
        {
            get { return titemField; }
            set { titemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string sitem
        {
            get { return sitemField; }
            set { sitemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(ChangeType.None)]
        public ChangeType chg
        {
            get { return chgField; }
            set { chgField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(false)]
        public bool ochg
        {
            get { return ochgField; }
            set { ochgField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(LockLevel.None)]
        public LockLevel @lock
        {
            get { return lockField; }
            set { lockField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string lowner
        {
            get { return lownerField; }
            set { lownerField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class ItemSet
    {
        string queryPathField;

        string patternField;

        Item[] itemsField;

        /// <remarks/>
        public string QueryPath
        {
            get { return queryPathField; }
            set { queryPathField = value; }
        }

        /// <remarks/>
        public string Pattern
        {
            get { return patternField; }
            set { patternField = value; }
        }

        /// <remarks/>
        public Item[] Items
        {
            get { return itemsField; }
            set { itemsField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class GlobalSecurity
    {
        AccessEntry[] entriesField;

        bool modField;

        public GlobalSecurity()
        {
            modField = true;
        }

        /// <remarks/>
        public AccessEntry[] Entries
        {
            get { return entriesField; }
            set { entriesField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(true)]
        public bool mod
        {
            get { return modField; }
            set { modField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class FileType
    {
        string[] extensionsField;

        bool multiField;

        string nameField;

        /// <remarks/>
        public string[] Extensions
        {
            get { return extensionsField; }
            set { extensionsField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public bool multi
        {
            get { return multiField; }
            set { multiField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string name
        {
            get { return nameField; }
            set { nameField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class BranchRelative
    {
        Item branchFromItemField;

        Item branchToItemField;

        int reltoidField;

        int relfromidField;

        bool reqstdField;

        public BranchRelative()
        {
            reqstdField = false;
        }

        /// <remarks/>
        public Item BranchFromItem
        {
            get { return branchFromItemField; }
            set { branchFromItemField = value; }
        }

        /// <remarks/>
        public Item BranchToItem
        {
            get { return branchToItemField; }
            set { branchToItemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int reltoid
        {
            get { return reltoidField; }
            set { reltoidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int relfromid
        {
            get { return relfromidField; }
            set { relfromidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(false)]
        public bool reqstd
        {
            get { return reqstdField; }
            set { reqstdField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class Annotation
    {
        string commentField;

        string itemField;

        int vField;

        string nameField;

        string valueField;

        DateTime dateField;

        /// <remarks/>
        public string Comment
        {
            get { return commentField; }
            set { commentField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string item
        {
            get { return itemField; }
            set { itemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int v
        {
            get { return vField; }
            set { vField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string value
        {
            get { return valueField; }
            set { valueField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public DateTime date
        {
            get { return dateField; }
            set { dateField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class ChangeRequest
    {
        ItemSpec itemField;

        VersionSpec vspecField;

        RequestType reqField;

        int didField;

        int encField;

        ItemType typeField;

        LockLevel lockField;

        string targetField;

        ItemType targettypeField;

        public ChangeRequest()
        {
            reqField = RequestType.None;
            didField = 0;
            encField = -2;
            typeField = ItemType.Any;
            lockField = LockLevel.Unchanged;
            targettypeField = ItemType.Any;
        }

        /// <remarks/>
        public ItemSpec item
        {
            get { return itemField; }
            set { itemField = value; }
        }

        /// <remarks/>
        public VersionSpec vspec
        {
            get { return vspecField; }
            set { vspecField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(RequestType.None)]
        public RequestType req
        {
            get { return reqField; }
            set { reqField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int did
        {
            get { return didField; }
            set { didField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(-2)]
        public int enc
        {
            get { return encField; }
            set { encField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(ItemType.Any)]
        public ItemType type
        {
            get { return typeField; }
            set { typeField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(LockLevel.Unchanged)]
        public LockLevel @lock
        {
            get { return lockField; }
            set { lockField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string target
        {
            get { return targetField; }
            set { targetField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(ItemType.Any)]
        public ItemType targettype
        {
            get { return targettypeField; }
            set { targettypeField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class ItemSpec
    {
        RecursionType recurseField;

        int didField;

        string itemField;

        public ItemSpec()
        {
            recurseField = RecursionType.None;
            didField = 0;
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(RecursionType.None)]
        public RecursionType recurse
        {
            get { return recurseField; }
            set { recurseField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int did
        {
            get { return didField; }
            set { didField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string item
        {
            get { return itemField; }
            set { itemField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum RecursionType
    {
        /// <remarks/>
        None,

        /// <remarks/>
        OneLevel,

        /// <remarks/>
        Full,
    }

    /// <remarks/>
    [XmlInclude(typeof(WorkspaceVersionSpec))]
    [XmlInclude(typeof(LabelVersionSpec))]
    [XmlInclude(typeof(LatestVersionSpec))]
    [XmlInclude(typeof(DateVersionSpec))]
    [XmlInclude(typeof(ChangesetVersionSpec))]
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public abstract partial class VersionSpec {}

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class WorkspaceVersionSpec : VersionSpec
    {
        string nameField;

        string ownerField;

        /// <remarks/>
        [XmlAttribute()]
        public string name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string owner
        {
            get { return ownerField; }
            set { ownerField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class LabelVersionSpec : VersionSpec
    {
        string labelField;

        string scopeField;

        /// <remarks/>
        [XmlAttribute()]
        public string label
        {
            get { return labelField; }
            set { labelField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string scope
        {
            get { return scopeField; }
            set { scopeField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class LatestVersionSpec : VersionSpec {}

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class DateVersionSpec : VersionSpec
    {
        DateTime dateField;

        string otextField;

        /// <remarks/>
        [XmlAttribute()]
        public DateTime date
        {
            get { return dateField; }
            set { dateField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string otext
        {
            get { return otextField; }
            set { otextField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class ChangesetVersionSpec : VersionSpec
    {
        int csField;

        /// <remarks/>
        [XmlAttribute()]
        public int cs
        {
            get { return csField; }
            set { csField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum RequestType
    {
        /// <remarks/>
        None,

        /// <remarks/>
        Add,

        /// <remarks/>
        Branch,

        /// <remarks/>
        Encoding,

        /// <remarks/>
        Edit,

        /// <remarks/>
        Delete,

        /// <remarks/>
        Lock,

        /// <remarks/>
        Rename,

        /// <remarks/>
        Undelete,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class Conflict
    {
        int cidField;

        int pcidField;

        ChangeType ychgField;

        string ysitemField;

        string ysitemsrcField;

        int yencField;

        ItemType ytypeField;

        int yverField;

        int yitemidField;

        int ydidField;

        ChangeType ylchgField;

        int ylmverField;

        string bsitemField;

        int bencField;

        int bitemidField;

        int bverField;

        byte[] bhashField;

        int bdidField;

        ItemType btypeField;

        ChangeType bchgField;

        int titemidField;

        int tverField;

        string tsitemField;

        int tencField;

        byte[] thashField;

        int tdidField;

        ItemType ttypeField;

        int tlmverField;

        string srclitemField;

        string tgtlitemField;

        ConflictType ctypeField;

        int reasonField;

        bool isnamecflictField;

        bool isforcedField;

        Resolution resField;

        bool isresolvedField;

        string bdurlField;

        string tdurlField;

        string ydurlField;

        public Conflict()
        {
            resField = Resolution.None;
        }

        /// <remarks/>
        [XmlAttribute()]
        public int cid
        {
            get { return cidField; }
            set { cidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int pcid
        {
            get { return pcidField; }
            set { pcidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public ChangeType ychg
        {
            get { return ychgField; }
            set { ychgField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string ysitem
        {
            get { return ysitemField; }
            set { ysitemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string ysitemsrc
        {
            get { return ysitemsrcField; }
            set { ysitemsrcField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int yenc
        {
            get { return yencField; }
            set { yencField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public ItemType ytype
        {
            get { return ytypeField; }
            set { ytypeField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int yver
        {
            get { return yverField; }
            set { yverField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int yitemid
        {
            get { return yitemidField; }
            set { yitemidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int ydid
        {
            get { return ydidField; }
            set { ydidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public ChangeType ylchg
        {
            get { return ylchgField; }
            set { ylchgField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int ylmver
        {
            get { return ylmverField; }
            set { ylmverField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string bsitem
        {
            get { return bsitemField; }
            set { bsitemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int benc
        {
            get { return bencField; }
            set { bencField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int bitemid
        {
            get { return bitemidField; }
            set { bitemidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int bver
        {
            get { return bverField; }
            set { bverField = value; }
        }

        /// <remarks/>
        [XmlAttribute(DataType="base64Binary")]
        public byte[] bhash
        {
            get { return bhashField; }
            set { bhashField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int bdid
        {
            get { return bdidField; }
            set { bdidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public ItemType btype
        {
            get { return btypeField; }
            set { btypeField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public ChangeType bchg
        {
            get { return bchgField; }
            set { bchgField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int titemid
        {
            get { return titemidField; }
            set { titemidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int tver
        {
            get { return tverField; }
            set { tverField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string tsitem
        {
            get { return tsitemField; }
            set { tsitemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int tenc
        {
            get { return tencField; }
            set { tencField = value; }
        }

        /// <remarks/>
        [XmlAttribute(DataType="base64Binary")]
        public byte[] thash
        {
            get { return thashField; }
            set { thashField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int tdid
        {
            get { return tdidField; }
            set { tdidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public ItemType ttype
        {
            get { return ttypeField; }
            set { ttypeField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int tlmver
        {
            get { return tlmverField; }
            set { tlmverField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string srclitem
        {
            get { return srclitemField; }
            set { srclitemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string tgtlitem
        {
            get { return tgtlitemField; }
            set { tgtlitemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public ConflictType ctype
        {
            get { return ctypeField; }
            set { ctypeField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int reason
        {
            get { return reasonField; }
            set { reasonField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public bool isnamecflict
        {
            get { return isnamecflictField; }
            set { isnamecflictField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public bool isforced
        {
            get { return isforcedField; }
            set { isforcedField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(Resolution.None)]
        public Resolution res
        {
            get { return resField; }
            set { resField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public bool isresolved
        {
            get { return isresolvedField; }
            set { isresolvedField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string bdurl
        {
            get { return bdurlField; }
            set { bdurlField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string tdurl
        {
            get { return tdurlField; }
            set { tdurlField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string ydurl
        {
            get { return ydurlField; }
            set { ydurlField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum Resolution
    {
        /// <remarks/>
        None,

        /// <remarks/>
        AcceptMerge,

        /// <remarks/>
        AcceptYours,

        /// <remarks/>
        AcceptTheirs,

        /// <remarks/>
        DeleteConflict,

        /// <remarks/>
        AcceptYoursRenameTheirs,

        /// <remarks/>
        OverwriteLocal,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class LabelItemSpec
    {
        ItemSpec itemSpecField;

        VersionSpec versionField;

        bool exField;

        public LabelItemSpec()
        {
            exField = false;
        }

        /// <remarks/>
        public ItemSpec ItemSpec
        {
            get { return itemSpecField; }
            set { itemSpecField = value; }
        }

        /// <remarks/>
        public VersionSpec Version
        {
            get { return versionField; }
            set { versionField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(false)]
        public bool ex
        {
            get { return exField; }
            set { exField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class VersionControlLabel
    {
        string commentField;

        Item[] itemsField;

        DateTime dateField;

        string nameField;

        string ownerField;

        string scopeField;

        int lidField;

        /// <remarks/>
        public string Comment
        {
            get { return commentField; }
            set { commentField = value; }
        }

        /// <remarks/>
        public Item[] Items
        {
            get { return itemsField; }
            set { itemsField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public DateTime date
        {
            get { return dateField; }
            set { dateField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string owner
        {
            get { return ownerField; }
            set { ownerField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string scope
        {
            get { return scopeField; }
            set { scopeField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int lid
        {
            get { return lidField; }
            set { lidField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class RepositoryProperties
    {
        Guid idField;

        string nameField;

        string verField;

        int lcsetField;

        byte[] dkeyField;

        /// <remarks/>
        [XmlAttribute()]
        public Guid id
        {
            get { return idField; }
            set { idField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string ver
        {
            get { return verField; }
            set { verField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int lcset
        {
            get { return lcsetField; }
            set { lcsetField = value; }
        }

        /// <remarks/>
        [XmlAttribute(DataType="base64Binary")]
        public byte[] dkey
        {
            get { return dkeyField; }
            set { dkeyField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class GetOperation
    {
        byte[] hashValueField;

        ItemType typeField;

        int itemidField;

        string slocalField;

        string tlocalField;

        string titemField;

        int sverField;

        int lverField;

        int didField;

        ChangeType chgField;

        LockLevel lockField;

        bool ilField;

        int pcidField;

        bool cnflctField;

        ChangeType cnflctchgField;

        int cnflctitemidField;

        string durlField;

        public GetOperation()
        {
            typeField = ItemType.Any;
            itemidField = 0;
            sverField = 0;
            lverField = 0;
            didField = 0;
            chgField = ChangeType.None;
            lockField = LockLevel.None;
            ilField = true;
            pcidField = 0;
            cnflctField = false;
            cnflctchgField = ChangeType.None;
            cnflctitemidField = 0;
        }

        /// <remarks/>
        [XmlElement(DataType="base64Binary")]
        public byte[] HashValue
        {
            get { return hashValueField; }
            set { hashValueField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(ItemType.Any)]
        public ItemType type
        {
            get { return typeField; }
            set { typeField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int itemid
        {
            get { return itemidField; }
            set { itemidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string slocal
        {
            get { return slocalField; }
            set { slocalField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string tlocal
        {
            get { return tlocalField; }
            set { tlocalField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string titem
        {
            get { return titemField; }
            set { titemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int sver
        {
            get { return sverField; }
            set { sverField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int lver
        {
            get { return lverField; }
            set { lverField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int did
        {
            get { return didField; }
            set { didField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(ChangeType.None)]
        public ChangeType chg
        {
            get { return chgField; }
            set { chgField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(LockLevel.None)]
        public LockLevel @lock
        {
            get { return lockField; }
            set { lockField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(true)]
        public bool il
        {
            get { return ilField; }
            set { ilField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int pcid
        {
            get { return pcidField; }
            set { pcidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(false)]
        public bool cnflct
        {
            get { return cnflctField; }
            set { cnflctField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(ChangeType.None)]
        public ChangeType cnflctchg
        {
            get { return cnflctchgField; }
            set { cnflctchgField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int cnflctitemid
        {
            get { return cnflctitemidField; }
            set { cnflctitemidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string durl
        {
            get { return durlField; }
            set { durlField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class GetRequest
    {
        ItemSpec itemSpecField;

        VersionSpec versionSpecField;

        /// <remarks/>
        public ItemSpec ItemSpec
        {
            get { return itemSpecField; }
            set { itemSpecField = value; }
        }

        /// <remarks/>
        public VersionSpec VersionSpec
        {
            get { return versionSpecField; }
            set { versionSpecField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class LabelResult
    {
        string labelField;

        string scopeField;

        LabelResultStatus statusField;

        /// <remarks/>
        [XmlAttribute()]
        public string label
        {
            get { return labelField; }
            set { labelField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string scope
        {
            get { return scopeField; }
            set { scopeField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public LabelResultStatus status
        {
            get { return statusField; }
            set { statusField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum LabelResultStatus
    {
        /// <remarks/>
        Created,

        /// <remarks/>
        Updated,

        /// <remarks/>
        Deleted,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class WorkingFolder
    {
        string localField;

        string itemField;

        WorkingFolderType typeField;

        public WorkingFolder()
        {
            typeField = WorkingFolderType.Map;
        }

        /// <remarks/>
        [XmlAttribute()]
        public string local
        {
            get { return localField; }
            set { localField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string item
        {
            get { return itemField; }
            set { itemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(WorkingFolderType.Map)]
        public WorkingFolderType type
        {
            get { return typeField; }
            set { typeField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum WorkingFolderType
    {
        /// <remarks/>
        Map,

        /// <remarks/>
        Cloak,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class Workspace
    {
        string commentField;

        DateTime lastAccessDateField;

        WorkingFolder[] foldersField;

        string computerField;

        string nameField;

        string ownerField;

        /// <remarks/>
        public string Comment
        {
            get { return commentField; }
            set { commentField = value; }
        }

        /// <remarks/>
        public DateTime LastAccessDate
        {
            get { return lastAccessDateField; }
            set { lastAccessDateField = value; }
        }

        /// <remarks/>
        public WorkingFolder[] Folders
        {
            get { return foldersField; }
            set { foldersField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string computer
        {
            get { return computerField; }
            set { computerField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string owner
        {
            get { return ownerField; }
            set { ownerField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class Warning
    {
        WarningType wrnField;

        ChangeType chgField;

        string userField;

        string cppField;

        string wsField;

        public Warning()
        {
            wrnField = WarningType.ResourcePendingChangeWarning;
            chgField = ChangeType.None;
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(WarningType.ResourcePendingChangeWarning)]
        public WarningType wrn
        {
            get { return wrnField; }
            set { wrnField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(ChangeType.None)]
        public ChangeType chg
        {
            get { return chgField; }
            set { chgField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string user
        {
            get { return userField; }
            set { userField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string cpp
        {
            get { return cppField; }
            set { cppField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string ws
        {
            get { return wsField; }
            set { wsField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum WarningType
    {
        /// <remarks/>
        ResourcePendingChangeWarning,

        /// <remarks/>
        NamespacePendingChangeWarning,

        /// <remarks/>
        StaleVersionWarning,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class Failure
    {
        Warning[] warningsField;

        string messageField;

        RequestType reqField;

        string codeField;

        SeverityType sevField;

        string computerField;

        string identField;

        string localField;

        string resField;

        string itemField;

        int itemidField;

        string wsField;

        string ownerField;

        public Failure()
        {
            reqField = RequestType.None;
            sevField = SeverityType.Error;
            itemidField = 0;
        }

        /// <remarks/>
        public Warning[] Warnings
        {
            get { return warningsField; }
            set { warningsField = value; }
        }

        /// <remarks/>
        public string Message
        {
            get { return messageField; }
            set { messageField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(RequestType.None)]
        public RequestType req
        {
            get { return reqField; }
            set { reqField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string code
        {
            get { return codeField; }
            set { codeField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(SeverityType.Error)]
        public SeverityType sev
        {
            get { return sevField; }
            set { sevField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string computer
        {
            get { return computerField; }
            set { computerField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string ident
        {
            get { return identField; }
            set { identField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string local
        {
            get { return localField; }
            set { localField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string res
        {
            get { return resField; }
            set { resField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string item
        {
            get { return itemField; }
            set { itemField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        [DefaultValue(0)]
        public int itemid
        {
            get { return itemidField; }
            set { itemidField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string ws
        {
            get { return wsField; }
            set { wsField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string owner
        {
            get { return ownerField; }
            set { ownerField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum SeverityType
    {
        /// <remarks/>
        Error,

        /// <remarks/>
        Warning,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class CheckinResult
    {
        string[] undoneServerItemsField;

        Item[] implicitItemsField;

        int csetField;

        /// <remarks/>
        public string[] UndoneServerItems
        {
            get { return undoneServerItemsField; }
            set { undoneServerItemsField = value; }
        }

        /// <remarks/>
        public Item[] ImplicitItems
        {
            get { return implicitItemsField; }
            set { implicitItemsField = value; }
        }

        /// <remarks/>
        [XmlAttribute()]
        public int cset
        {
            get { return csetField; }
            set { csetField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class CheckinNotificationWorkItemInfo
    {
        int idField;

        CheckinWorkItemAction checkinActionField;

        /// <remarks/>
        public int Id
        {
            get { return idField; }
            set { idField = value; }
        }

        /// <remarks/>
        public CheckinWorkItemAction CheckinAction
        {
            get { return checkinActionField; }
            set { checkinActionField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum CheckinWorkItemAction
    {
        /// <remarks/>
        None,

        /// <remarks/>
        Resolve,

        /// <remarks/>
        Associate,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class CheckinNotificationInfo
    {
        CheckinNotificationWorkItemInfo[] workItemInfoField;

        /// <remarks/>
        public CheckinNotificationWorkItemInfo[] WorkItemInfo
        {
            get { return workItemInfoField; }
            set { workItemInfoField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class PolicyFailureInfo
    {
        string policyNameField;

        string messageField;

        /// <remarks/>
        public string PolicyName
        {
            get { return policyNameField; }
            set { policyNameField = value; }
        }

        /// <remarks/>
        public string Message
        {
            get { return messageField; }
            set { messageField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public partial class PolicyOverrideInfo
    {
        string commentField;

        PolicyFailureInfo[] policyFailuresField;

        /// <remarks/>
        public string Comment
        {
            get { return commentField; }
            set { commentField = value; }
        }

        /// <remarks/>
        public PolicyFailureInfo[] PolicyFailures
        {
            get { return policyFailuresField; }
            set { policyFailuresField = value; }
        }
    }

    /// <remarks/>
    [Flags()]
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum CheckinOptions
    {
        /// <remarks/>
        None = 1,

        /// <remarks/>
        ValidateCheckinOwner = 2,

        /// <remarks/>
        SuppressEvent = 4,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum LabelChildOption
    {
        /// <remarks/>
        Fail,

        /// <remarks/>
        Replace,

        /// <remarks/>
        Merge,
    }

    /// <remarks/>
    [Flags()]
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum MergeOptions
    {
        /// <remarks/>
        None = 1,

        /// <remarks/>
        ForceMerge = 2,

        /// <remarks/>
        Baseless = 4,

        /// <remarks/>
        NoMerge = 8,

        /// <remarks/>
        AlwaysAcceptMine = 16,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.42")]
    [Serializable()]
    [XmlType(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices" +
                       "/03")]
    public enum DeletedState
    {
        /// <remarks/>
        NonDeleted,

        /// <remarks/>
        Deleted,

        /// <remarks/>
        Any,
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void AddConflictCompletedEventHandler(object sender,
                                                          AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void CheckAuthenticationCompletedEventHandler(object sender,
                                                                  CheckAuthenticationCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class CheckAuthenticationCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal CheckAuthenticationCompletedEventArgs(object[] results,
                                                       Exception exception,
                                                       bool cancelled,
                                                       object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void CheckInCompletedEventHandler(object sender,
                                                      CheckInCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class CheckInCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal CheckInCompletedEventArgs(object[] results,
                                           Exception exception,
                                           bool cancelled,
                                           object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CheckinResult Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((CheckinResult)(results[0]));
            }
        }

        /// <remarks/>
        public Failure[] failures
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Failure[])(results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void CheckPendingChangesCompletedEventHandler(object sender,
                                                                  CheckPendingChangesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class CheckPendingChangesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal CheckPendingChangesCompletedEventArgs(object[] results,
                                                       Exception exception,
                                                       bool cancelled,
                                                       object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Failure[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Failure[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void CreateAnnotationCompletedEventHandler(object sender,
                                                               AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void CreateCheckinNoteDefinitionCompletedEventHandler(object sender,
                                                                          AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void CreateWorkspaceCompletedEventHandler(object sender,
                                                              CreateWorkspaceCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class CreateWorkspaceCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal CreateWorkspaceCompletedEventArgs(object[] results,
                                                   Exception exception,
                                                   bool cancelled,
                                                   object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Workspace Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Workspace)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void DeleteAnnotationCompletedEventHandler(object sender,
                                                               AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void DeleteLabelCompletedEventHandler(object sender,
                                                          DeleteLabelCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class DeleteLabelCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal DeleteLabelCompletedEventArgs(object[] results,
                                               Exception exception,
                                               bool cancelled,
                                               object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public LabelResult[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((LabelResult[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void DeleteShelvesetCompletedEventHandler(object sender,
                                                              AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void DeleteWorkspaceCompletedEventHandler(object sender,
                                                              AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void GetCompletedEventHandler(object sender,
                                                  GetCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetCompletedEventArgs(object[] results,
                                       Exception exception,
                                       bool cancelled,
                                       object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GetOperation[][] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((GetOperation[][])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void GetRepositoryPropertiesCompletedEventHandler(object sender,
                                                                      GetRepositoryPropertiesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetRepositoryPropertiesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetRepositoryPropertiesCompletedEventArgs(object[] results,
                                                           Exception exception,
                                                           bool cancelled,
                                                           object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public RepositoryProperties Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((RepositoryProperties)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void LabelItemCompletedEventHandler(object sender,
                                                        LabelItemCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class LabelItemCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal LabelItemCompletedEventArgs(object[] results,
                                             Exception exception,
                                             bool cancelled,
                                             object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public LabelResult[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((LabelResult[])(results[0]));
            }
        }

        /// <remarks/>
        public Failure[] failures
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Failure[])(results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void MergeCompletedEventHandler(object sender,
                                                    MergeCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class MergeCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal MergeCompletedEventArgs(object[] results,
                                         Exception exception,
                                         bool cancelled,
                                         object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GetOperation[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((GetOperation[])(results[0]));
            }
        }

        /// <remarks/>
        public Failure[] failures
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Failure[])(results[1]));
            }
        }

        /// <remarks/>
        public Conflict[] conflicts
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Conflict[])(results[2]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void PendChangesCompletedEventHandler(object sender,
                                                          PendChangesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class PendChangesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal PendChangesCompletedEventArgs(object[] results,
                                               Exception exception,
                                               bool cancelled,
                                               object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GetOperation[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((GetOperation[])(results[0]));
            }
        }

        /// <remarks/>
        public Failure[] failures
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Failure[])(results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryAnnotationCompletedEventHandler(object sender,
                                                              QueryAnnotationCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryAnnotationCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryAnnotationCompletedEventArgs(object[] results,
                                                   Exception exception,
                                                   bool cancelled,
                                                   object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Annotation[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Annotation[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryBranchesCompletedEventHandler(object sender,
                                                            QueryBranchesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryBranchesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryBranchesCompletedEventArgs(object[] results,
                                                 Exception exception,
                                                 bool cancelled,
                                                 object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public BranchRelative[][] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((BranchRelative[][])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryChangesetCompletedEventHandler(object sender,
                                                             QueryChangesetCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryChangesetCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryChangesetCompletedEventArgs(object[] results,
                                                  Exception exception,
                                                  bool cancelled,
                                                  object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Changeset Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Changeset)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryCheckinNoteDefinitionCompletedEventHandler(object sender,
                                                                         QueryCheckinNoteDefinitionCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryCheckinNoteDefinitionCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryCheckinNoteDefinitionCompletedEventArgs(object[] results,
                                                              Exception exception,
                                                              bool cancelled,
                                                              object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CheckinNoteFieldDefinition[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((CheckinNoteFieldDefinition[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryCheckinNoteFieldNamesCompletedEventHandler(object sender,
                                                                         QueryCheckinNoteFieldNamesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryCheckinNoteFieldNamesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryCheckinNoteFieldNamesCompletedEventArgs(object[] results,
                                                              Exception exception,
                                                              bool cancelled,
                                                              object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryConflictsCompletedEventHandler(object sender,
                                                             QueryConflictsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryConflictsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryConflictsCompletedEventArgs(object[] results,
                                                  Exception exception,
                                                  bool cancelled,
                                                  object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Conflict[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Conflict[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryEffectiveGlobalPermissionsCompletedEventHandler(object sender,
                                                                              QueryEffectiveGlobalPermissionsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryEffectiveGlobalPermissionsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryEffectiveGlobalPermissionsCompletedEventArgs(object[] results,
                                                                   Exception exception,
                                                                   bool cancelled,
                                                                   object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryEffectiveItemPermissionsCompletedEventHandler(object sender,
                                                                            QueryEffectiveItemPermissionsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryEffectiveItemPermissionsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryEffectiveItemPermissionsCompletedEventArgs(object[] results,
                                                                 Exception exception,
                                                                 bool cancelled,
                                                                 object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryFileTypesCompletedEventHandler(object sender,
                                                             QueryFileTypesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryFileTypesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryFileTypesCompletedEventArgs(object[] results,
                                                  Exception exception,
                                                  bool cancelled,
                                                  object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public FileType[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((FileType[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryGlobalPermissionsCompletedEventHandler(object sender,
                                                                     QueryGlobalPermissionsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryGlobalPermissionsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryGlobalPermissionsCompletedEventArgs(object[] results,
                                                          Exception exception,
                                                          bool cancelled,
                                                          object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GlobalSecurity Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((GlobalSecurity)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryHistoryCompletedEventHandler(object sender,
                                                           QueryHistoryCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryHistoryCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryHistoryCompletedEventArgs(object[] results,
                                                Exception exception,
                                                bool cancelled,
                                                object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Changeset[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Changeset[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryItemsCompletedEventHandler(object sender,
                                                         QueryItemsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryItemsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryItemsCompletedEventArgs(object[] results,
                                              Exception exception,
                                              bool cancelled,
                                              object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ItemSet[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ItemSet[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryItemsExtendedCompletedEventHandler(object sender,
                                                                 QueryItemsExtendedCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryItemsExtendedCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryItemsExtendedCompletedEventArgs(object[] results,
                                                      Exception exception,
                                                      bool cancelled,
                                                      object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ExtendedItem[][] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ExtendedItem[][])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryItemPermissionsCompletedEventHandler(object sender,
                                                                   QueryItemPermissionsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryItemPermissionsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryItemPermissionsCompletedEventArgs(object[] results,
                                                        Exception exception,
                                                        bool cancelled,
                                                        object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ItemSecurity[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ItemSecurity[])(results[0]));
            }
        }

        /// <remarks/>
        public Failure[] failures
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Failure[])(results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryLabelsCompletedEventHandler(object sender,
                                                          QueryLabelsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryLabelsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryLabelsCompletedEventArgs(object[] results,
                                               Exception exception,
                                               bool cancelled,
                                               object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public VersionControlLabel[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((VersionControlLabel[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryMergeCandidatesCompletedEventHandler(object sender,
                                                                   QueryMergeCandidatesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryMergeCandidatesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryMergeCandidatesCompletedEventArgs(object[] results,
                                                        Exception exception,
                                                        bool cancelled,
                                                        object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public MergeCandidate[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((MergeCandidate[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryMergesCompletedEventHandler(object sender,
                                                          QueryMergesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryMergesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryMergesCompletedEventArgs(object[] results,
                                               Exception exception,
                                               bool cancelled,
                                               object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ChangesetMerge[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ChangesetMerge[])(results[0]));
            }
        }

        /// <remarks/>
        public Changeset[] changesets
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Changeset[])(results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryPendingSetsCompletedEventHandler(object sender,
                                                               QueryPendingSetsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryPendingSetsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryPendingSetsCompletedEventArgs(object[] results,
                                                    Exception exception,
                                                    bool cancelled,
                                                    object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PendingSet[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((PendingSet[])(results[0]));
            }
        }

        /// <remarks/>
        public Failure[] failures
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Failure[])(results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryShelvedChangesCompletedEventHandler(object sender,
                                                                  QueryShelvedChangesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryShelvedChangesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryShelvedChangesCompletedEventArgs(object[] results,
                                                       Exception exception,
                                                       bool cancelled,
                                                       object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PendingSet[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((PendingSet[])(results[0]));
            }
        }

        /// <remarks/>
        public Failure[] failures
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Failure[])(results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryShelvesetsCompletedEventHandler(object sender,
                                                              QueryShelvesetsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryShelvesetsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryShelvesetsCompletedEventArgs(object[] results,
                                                   Exception exception,
                                                   bool cancelled,
                                                   object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Shelveset[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Shelveset[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryWorkspaceCompletedEventHandler(object sender,
                                                             QueryWorkspaceCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryWorkspaceCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryWorkspaceCompletedEventArgs(object[] results,
                                                  Exception exception,
                                                  bool cancelled,
                                                  object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Workspace Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Workspace)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryWorkspacesCompletedEventHandler(object sender,
                                                              QueryWorkspacesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryWorkspacesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryWorkspacesCompletedEventArgs(object[] results,
                                                   Exception exception,
                                                   bool cancelled,
                                                   object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Workspace[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Workspace[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void RefreshIdentityDisplayNameCompletedEventHandler(object sender,
                                                                         AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void RemoveLocalConflictCompletedEventHandler(object sender,
                                                                  AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void ResolveCompletedEventHandler(object sender,
                                                      ResolveCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class ResolveCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ResolveCompletedEventArgs(object[] results,
                                           Exception exception,
                                           bool cancelled,
                                           object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GetOperation[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((GetOperation[])(results[0]));
            }
        }

        /// <remarks/>
        public GetOperation[] undoOperations
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((GetOperation[])(results[1]));
            }
        }

        /// <remarks/>
        public Conflict[] resolvedConflicts
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Conflict[])(results[2]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void SetFileTypesCompletedEventHandler(object sender,
                                                           AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void ShelveCompletedEventHandler(object sender,
                                                     ShelveCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class ShelveCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ShelveCompletedEventArgs(object[] results,
                                          Exception exception,
                                          bool cancelled,
                                          object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Failure[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Failure[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void UndoPendingChangesCompletedEventHandler(object sender,
                                                                 UndoPendingChangesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UndoPendingChangesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal UndoPendingChangesCompletedEventArgs(object[] results,
                                                      Exception exception,
                                                      bool cancelled,
                                                      object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GetOperation[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((GetOperation[])(results[0]));
            }
        }

        /// <remarks/>
        public Failure[] failures
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Failure[])(results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void UnlabelItemCompletedEventHandler(object sender,
                                                          UnlabelItemCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UnlabelItemCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal UnlabelItemCompletedEventArgs(object[] results,
                                               Exception exception,
                                               bool cancelled,
                                               object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public LabelResult[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((LabelResult[])(results[0]));
            }
        }

        /// <remarks/>
        public Failure[] failures
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Failure[])(results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void UnshelveCompletedEventHandler(object sender,
                                                       UnshelveCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UnshelveCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal UnshelveCompletedEventArgs(object[] results,
                                            Exception exception,
                                            bool cancelled,
                                            object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Shelveset Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Shelveset)(results[0]));
            }
        }

        /// <remarks/>
        public Failure[] failures
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Failure[])(results[1]));
            }
        }

        /// <remarks/>
        public GetOperation[] getOperations
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((GetOperation[])(results[2]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void UpdateChangesetCompletedEventHandler(object sender,
                                                              AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void UpdateCheckinNoteFieldNameCompletedEventHandler(object sender,
                                                                         AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void UpdateGlobalSecurityCompletedEventHandler(object sender,
                                                                   UpdateGlobalSecurityCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UpdateGlobalSecurityCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal UpdateGlobalSecurityCompletedEventArgs(object[] results,
                                                        Exception exception,
                                                        bool cancelled,
                                                        object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PermissionChange[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((PermissionChange[])(results[0]));
            }
        }

        /// <remarks/>
        public Failure[] failures
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Failure[])(results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void UpdateItemSecurityCompletedEventHandler(object sender,
                                                                 UpdateItemSecurityCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UpdateItemSecurityCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal UpdateItemSecurityCompletedEventArgs(object[] results,
                                                      Exception exception,
                                                      bool cancelled,
                                                      object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SecurityChange[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((SecurityChange[])(results[0]));
            }
        }

        /// <remarks/>
        public Failure[] failures
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Failure[])(results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void UpdateLocalVersionCompletedEventHandler(object sender,
                                                                 AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void UpdatePendingStateCompletedEventHandler(object sender,
                                                                 AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void UpdateWorkspaceCompletedEventHandler(object sender,
                                                              UpdateWorkspaceCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UpdateWorkspaceCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal UpdateWorkspaceCompletedEventArgs(object[] results,
                                                   Exception exception,
                                                   bool cancelled,
                                                   object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Workspace Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Workspace)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryPendingChangesByIdCompletedEventHandler(object sender,
                                                                      QueryPendingChangesByIdCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryPendingChangesByIdCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryPendingChangesByIdCompletedEventArgs(object[] results,
                                                           Exception exception,
                                                           bool cancelled,
                                                           object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PendingChange[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((PendingChange[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void QueryItemsByIdCompletedEventHandler(object sender,
                                                             QueryItemsByIdCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class QueryItemsByIdCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal QueryItemsByIdCompletedEventArgs(object[] results,
                                                  Exception exception,
                                                  bool cancelled,
                                                  object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Item[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Item[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.42")]
    public delegate void CreateTeamProjectFolderCompletedEventHandler(object sender,
                                                                      AsyncCompletedEventArgs e);
}

#pragma warning restore 1591